{
  "address": "0x78Ebe1f299903109606fe64Ea291ffa719E98a2a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataOfferingId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "consentSubjects",
          "type": "string[]"
        }
      ],
      "name": "ConsentGiven",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "consumers",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataOfferingId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "consentSubjects",
          "type": "string[]"
        }
      ],
      "name": "ConsentRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dataOfferingId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_consentSubject",
          "type": "string"
        }
      ],
      "name": "checkConsentStatus",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dataOfferingId",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_consentSubjects",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_consentFormHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        }
      ],
      "name": "giveConsent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_dataOfferingId",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_consentSubjects",
          "type": "string[]"
        }
      ],
      "name": "revokeConsent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a5d7a198666ceb3596fe1daf5be4edf1256d512cec592bdb539d5402c4022da",
  "receipt": {
    "to": null,
    "from": "0x580d142D0c2958d843499553275e427Da4Ab7Eb5",
    "contractAddress": "0x78Ebe1f299903109606fe64Ea291ffa719E98a2a",
    "transactionIndex": 0,
    "gasUsed": "1139419",
    "logsBloom": "0x
    "blockHash": "0x2fe535168a682104f72d5a9e443dc22d3fbffa7ec16043e9841d7a4ab1d7bfb8",
    "transactionHash": "0x1a5d7a198666ceb3596fe1daf5be4edf1256d512cec592bdb539d5402c4022da",
    "logs": [],
    "blockNumber": 616422,
    "cumulativeGasUsed": "1139419",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7b4b6dda4242265662469b37d10c2508",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"consentSubjects\",\"type\":\"string[]\"}],\"name\":\"ConsentGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"consumers\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"consentSubjects\",\"type\":\"string[]\"}],\"name\":\"ConsentRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_consentSubject\",\"type\":\"string\"}],\"name\":\"checkConsentStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_consentSubjects\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_consentFormHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"giveConsent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_consentSubjects\",\"type\":\"string[]\"}],\"name\":\"revokeConsent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExplicitUserConsent.sol\":\"ExplicitUserConsent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"contracts/Agreement.sol\":{\"content\":\"// /*\\r\\n\\r\\n// * Copyright (c) Siemens AG, 2020-2022\\r\\n\\r\\n// *\\r\\n\\r\\n// * Authors:\\r\\n\\r\\n// * Susanne Stahnke <susanne.stahnke@siemens.com>,\\r\\n\\r\\n// * Yvonne Kovacs <yvonne.kovacs@siemens.com>\\r\\n\\r\\n// *\\r\\n\\r\\n// * This work is licensed under the terms of Apache 2.0. See\\r\\n\\r\\n// * the LICENSE file in the top-level directory.\\r\\n\\r\\n// */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nenum State {\\r\\n    Active,\\r\\n    Violated,\\r\\n    Terminated\\r\\n}\\r\\n\\r\\nstruct Agreement {\\r\\n    uint256 agreementId;\\r\\n    string providerPublicKey;\\r\\n    string consumerPublicKey;\\r\\n    string dataExchangeAgreementHash;\\r\\n    string[2] signatures;\\r\\n    DataOffering dataOffering;\\r\\n    string purpose;\\r\\n    State state;\\r\\n    uint256[3] agreementDates;\\r\\n    IntendedUse intendedUse;\\r\\n    LicenseGrant licenseGrant;\\r\\n    TypeOfData typeOfData;\\r\\n    PricingModel pricingModel;\\r\\n    Violation violation;\\r\\n    bool termination;\\r\\n}\\r\\n\\r\\nstruct TypeOfData {\\r\\n    bool dataStream;\\r\\n    bool personalData;\\r\\n}\\r\\n\\r\\nstruct DataOffering {\\r\\n    string dataOfferingId;\\r\\n    uint256 dataOfferingVersion;\\r\\n    string title;\\r\\n}\\r\\n\\r\\nstruct IntendedUse {\\r\\n    bool processData;\\r\\n    bool shareDataWithThirdParty;\\r\\n    bool editData;\\r\\n}\\r\\n\\r\\nstruct LicenseGrant {\\r\\n    bool transferable;\\r\\n    bool exclusiveness;\\r\\n    bool paidUp;\\r\\n    bool revocable;\\r\\n    bool processing;\\r\\n    bool modifying;\\r\\n    bool analyzing;\\r\\n    bool storingData;\\r\\n    bool storingCopy;\\r\\n    bool reproducing;\\r\\n    bool distributing;\\r\\n    bool loaning;\\r\\n    bool selling;\\r\\n    bool renting;\\r\\n    bool furtherLicensing;\\r\\n    bool leasing;\\r\\n}\\r\\n\\r\\nstruct PricingModel {\\r\\n    string paymentType;\\r\\n    uint256 price;\\r\\n    string currency;\\r\\n    uint256 fee;\\r\\n    PaymentOnSubscription paymentOnSubscription;\\r\\n    bool isFree;\\r\\n}\\r\\n\\r\\nstruct PaymentOnSubscription {\\r\\n    string timeDuration;\\r\\n    string repeat;\\r\\n}\\r\\n\\r\\nenum ViolationType {\\r\\n    NotViolated,\\r\\n    PaymentNotCompleted,\\r\\n    DataNotTransferredAsDescribed,\\r\\n    DataNotAsDescribed,\\r\\n    LicenseViolated\\r\\n}\\r\\n\\r\\nstruct Violation {\\r\\n    ViolationType violationType;\\r\\n    string issuerId;\\r\\n    string[3] penaltyChoices;\\r\\n}\\r\\n\\r\\nstruct Counter {\\r\\n    uint256 activeAgreementCount;\\r\\n    mapping (string => uint) providerCount;\\r\\n    mapping (string => uint) providerActiveCount;\\r\\n    mapping (string => uint) consumerCount;\\r\\n    mapping (string => uint) consumerActiveCount;\\r\\n    mapping (string => uint) dataOfferingCount;\\r\\n}\\r\\n\\r\\nstruct SignedResolution {\\r\\n    string proofType;\\r\\n    string resolutionType;\\r\\n    string resolution;\\r\\n    string dataExchangeId;\\r\\n    uint256 iat;\\r\\n    string iss;\\r\\n    string sub;\\r\\n}\\r\\n\\r\\nlibrary AgreementViolationLibrary {\\r\\n\\r\\n    function evaluateResolution(\\r\\n        Agreement storage agreement,\\r\\n        string memory _proofType,\\r\\n        string memory _type,\\r\\n        string memory _resolution,\\r\\n        string memory _dataExchangeId,\\r\\n        uint256 _iat,\\r\\n        string memory _iss,\\r\\n        string memory _sub,\\r\\n        Counter storage counter) public {\\r\\n\\r\\n        SignedResolution memory signedResolution;\\r\\n        signedResolution.proofType = _proofType;\\r\\n        signedResolution.resolutionType = _type;\\r\\n        signedResolution.resolution = _resolution;\\r\\n        signedResolution.dataExchangeId = _dataExchangeId;\\r\\n        signedResolution.iat = _iat;\\r\\n        signedResolution.iss = _iss;   \\r\\n        signedResolution.sub = _sub;\\r\\n\\r\\n        if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"completed\\\"))){\\r\\n            delete agreement.violation.penaltyChoices;   \\r\\n        }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"notCompleted\\\"))) { \\r\\n                issueViolation(agreement, ViolationType.DataNotTransferredAsDescribed, signedResolution.sub); \\r\\n                agreement.state = State.Violated; \\r\\n                counter.activeAgreementCount--;\\r\\n                counter.providerActiveCount[agreement.providerPublicKey]--;\\r\\n                counter.consumerActiveCount[agreement.consumerPublicKey]--;\\r\\n                \\r\\n        }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"accepted\\\"))){ \\r\\n                issueViolation(agreement, ViolationType.DataNotTransferredAsDescribed, signedResolution.sub); \\r\\n                agreement.state = State.Violated; \\r\\n                counter.activeAgreementCount--;\\r\\n                counter.providerActiveCount[agreement.providerPublicKey]--;\\r\\n                counter.consumerActiveCount[agreement.consumerPublicKey]--;\\r\\n             }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"denied\\\"))){\\r\\n                delete agreement.violation.penaltyChoices;  \\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function issueViolation(Agreement storage agreement, ViolationType _violationType, string memory _issuerId) private {\\r\\n        agreement.violation = Violation(_violationType, _issuerId, [\\\"Terminate\\\", \\\"NewEndDateForAgreement\\\", \\\"NewEndDateForAgreementAndReductionOfPayment\\\"]);\\r\\n    }\\r\\n\\r\\n     function getViolation(Agreement storage agreement) public view returns (Violation memory){\\r\\n        return agreement.violation;\\r\\n    }\\r\\n   \\r\\n    function enforcePenalty (Agreement storage agreement, string memory _chosenPenalty, uint256 _price, uint256 _fee,\\r\\n                             uint256 _newEndDate, Counter storage counter) public {\\r\\n\\r\\n        if(agreement.violation.violationType == ViolationType.DataNotTransferredAsDescribed){\\r\\n                if (keccak256(abi.encodePacked(_chosenPenalty)) == \\\"NewEndDateForAgreement\\\"){\\r\\n                    require(_newEndDate > block.timestamp, \\\"New end date must be after current date\\\");\\r\\n                    agreement.agreementDates[2] = _newEndDate;\\r\\n                }\\r\\n                else if (keccak256(abi.encodePacked(_chosenPenalty)) == (keccak256(abi.encodePacked(\\\"NewEndDateForAgreementAndReductionOfPayment\\\")))){\\r\\n                    require(_newEndDate > block.timestamp, \\\"New end date must be after current date.\\\");\\r\\n                    agreement.agreementDates[2] = _newEndDate;\\r\\n                    agreement.pricingModel.price = _price;\\r\\n                    agreement.pricingModel.fee = _fee;\\r\\n                }\\r\\n            agreement.state = State.Active;\\r\\n            counter.activeAgreementCount++;\\r\\n            counter.providerActiveCount[agreement.providerPublicKey]++;\\r\\n            counter.consumerActiveCount[agreement.consumerPublicKey]++; \\r\\n        }    \\r\\n    }\\r\\n}\\r\\n    \\r\\nlibrary AgreementLib {\\r\\n\\r\\n    function createAgreement(\\r\\n        string memory _providerPublicKey,\\r\\n        string memory _consumerPublicKey,\\r\\n        string memory _dataExchangeAgreementHash,\\r\\n        string[2] memory _signatures,\\r\\n        DataOffering memory dataOffering,\\r\\n        string memory _purpose,\\r\\n        uint256[] memory dates,\\r\\n        IntendedUse memory intendedUse,\\r\\n        LicenseGrant memory licenseGrant,\\r\\n        PricingModel memory pricingModel,\\r\\n        TypeOfData memory typeOfData,\\r\\n        Counter storage counter\\r\\n    ) internal returns (Agreement memory agreement)\\r\\n    {\\r\\n        agreement.providerPublicKey = _providerPublicKey;\\r\\n        agreement.consumerPublicKey = _consumerPublicKey;\\r\\n        agreement.dataExchangeAgreementHash = _dataExchangeAgreementHash;\\r\\n        agreement.signatures = _signatures;\\r\\n        agreement.dataOffering.dataOfferingId = dataOffering.dataOfferingId;\\r\\n        agreement.dataOffering.dataOfferingVersion = dataOffering.dataOfferingVersion;\\r\\n        agreement.dataOffering.title = dataOffering.title;\\r\\n        agreement.purpose = _purpose;\\r\\n\\r\\n        agreement.state = State.Active;\\r\\n        agreement.agreementDates[0] = dates[0];\\r\\n        agreement.agreementDates[1] = dates[1];\\r\\n\\r\\n        require(\\r\\n            dates[1] >= agreement.agreementDates[0],\\r\\n            \\\"Start date must be after creation date.\\\"\\r\\n        );\\r\\n        require(dates[2] > dates[1], \\\"End date must be after start date.\\\");\\r\\n        agreement.agreementDates[2] = dates[2];\\r\\n        agreement.intendedUse = intendedUse;\\r\\n        agreement.licenseGrant = licenseGrant;\\r\\n        agreement.pricingModel = pricingModel;\\r\\n\\r\\n        agreement.typeOfData.dataStream = typeOfData.dataStream;\\r\\n        agreement.typeOfData.personalData = typeOfData.personalData;\\r\\n       \\r\\n        counter.activeAgreementCount++;\\r\\n        counter.providerCount[_providerPublicKey]++;\\r\\n        counter.consumerCount[_consumerPublicKey]++; \\r\\n        counter.providerActiveCount[_providerPublicKey]++;\\r\\n        counter.consumerActiveCount[_consumerPublicKey]++; \\r\\n        counter.dataOfferingCount[dataOffering.dataOfferingId]++;\\r\\n    \\r\\n    }\\r\\n\\r\\n    function terminateAgreement(Agreement storage agreement, Counter storage counter) public {\\r\\n        if(agreement.agreementDates[2]<=block.timestamp || agreement.termination){ \\r\\n            if(agreement.state == State.Active){\\r\\n                counter.activeAgreementCount--;\\r\\n                counter.providerActiveCount[agreement.providerPublicKey]--;\\r\\n                counter.consumerActiveCount[agreement.consumerPublicKey]--;\\r\\n            }     \\r\\n            agreement.state = State.Terminated;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary GetAgreementsLibrary {\\r\\n     function getAgreementsByConsumer(Agreement[] storage agreements, string[] memory _consumerPublicKeys, bool active, Counter storage counter) external view returns (Agreement[] memory) {\\r\\n        uint256 k = 0;\\r\\n        uint256 length = 0;\\r\\n        Agreement[] memory consumerAgreements;\\r\\n        if(active) {\\r\\n            for(uint j= 0; j < _consumerPublicKeys.length; j++)\\r\\n                length += counter.consumerActiveCount[_consumerPublicKeys[j]];\\r\\n            consumerAgreements = new Agreement[](length); \\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                for( uint j= 0; j < _consumerPublicKeys.length; j++)\\r\\n                     if (agreements[i].state == State.Active && keccak256(abi.encodePacked(agreements[i].consumerPublicKey)) == keccak256(abi.encodePacked(_consumerPublicKeys[j]))){\\r\\n                        console.log(i);\\r\\n                        consumerAgreements[k] = agreements[i];\\r\\n                        k++;\\r\\n                    }  \\r\\n        }\\r\\n        else {\\r\\n            for(uint j= 0; j < _consumerPublicKeys.length; j++)\\r\\n                length += counter.consumerCount[_consumerPublicKeys[j]];\\r\\n            consumerAgreements = new Agreement[](length);\\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                for( uint j= 0; j < _consumerPublicKeys.length; j++)\\r\\n                     if (keccak256(abi.encodePacked(agreements[i].consumerPublicKey)) == keccak256(abi.encodePacked(_consumerPublicKeys[j]))){\\r\\n                        consumerAgreements[k] = agreements[i];\\r\\n                        k++;\\r\\n                    }\\r\\n        }\\r\\n        return consumerAgreements;\\r\\n    }\\r\\n\\r\\n    function getAgreementsByProvider(Agreement[] storage agreements, string[] memory _providerPublicKeys, bool active, Counter storage counter) external view returns (Agreement[] memory) {\\r\\n        uint256 k = 0;\\r\\n        uint256 length = 0;\\r\\n        Agreement[] memory providerAgreements;\\r\\n        if(active) {\\r\\n            for(uint j= 0; j < _providerPublicKeys.length; j++)\\r\\n                length += counter.providerActiveCount[_providerPublicKeys[j]];\\r\\n            providerAgreements = new Agreement[](length); \\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                for( uint j= 0; j < _providerPublicKeys.length; j++)\\r\\n                     if (agreements[i].state == State.Active && keccak256(abi.encodePacked(agreements[i].providerPublicKey)) == keccak256(abi.encodePacked(_providerPublicKeys[j]))){\\r\\n                        console.log(i);\\r\\n                        providerAgreements[k] = agreements[i];\\r\\n                        k++;\\r\\n                    }  \\r\\n        }\\r\\n        else {\\r\\n            for(uint j= 0; j < _providerPublicKeys.length; j++)\\r\\n                length += counter.providerCount[_providerPublicKeys[j]];\\r\\n            providerAgreements = new Agreement[](length);\\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                for( uint j= 0; j < _providerPublicKeys.length; j++)\\r\\n                     if (keccak256(abi.encodePacked(agreements[i].providerPublicKey)) == keccak256(abi.encodePacked(_providerPublicKeys[j]))){\\r\\n                        providerAgreements[k] = agreements[i];\\r\\n                        k++;\\r\\n                    }\\r\\n        }\\r\\n        return providerAgreements;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary RetrieveAgreementsLibrary {\\r\\n\\r\\n    function checkActiveAgreements (Agreement[] storage agreements, Counter storage counter) external view returns (Agreement[] memory) {\\r\\n        Agreement[] memory activeAgreements = new Agreement[](counter.activeAgreementCount); \\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if(agreements[i].state == State.Active) {   \\r\\n                activeAgreements[k++] = agreements[i];\\r\\n            }\\r\\n        }\\r\\n        return activeAgreements;\\r\\n    }\\r\\n    \\r\\n    // function checkAgreementsByConsumer(Agreement[] storage agreements, string memory _consumerPublicKey, bool active, Counter storage counter) external view returns (Agreement[] memory) {\\r\\n    //     uint256 k = 0;\\r\\n    //     Agreement[] memory consumerAgreements;\\r\\n    //     if(active) {\\r\\n    //         consumerAgreements = new Agreement[](counter.consumerActiveCount[_consumerPublicKey]); \\r\\n    //         for (uint i = 0; i < agreements.length; i++)\\r\\n    //             if (agreements[i].state == State.Active && keccak256(abi.encodePacked(agreements[i].consumerPublicKey)) == keccak256(abi.encodePacked(_consumerPublicKey))){\\r\\n    //                 consumerAgreements[k++] = agreements[i];\\r\\n    //             }  \\r\\n    //     }\\r\\n    //     else {\\r\\n    //         consumerAgreements = new Agreement[](counter.consumerCount[_consumerPublicKey]);\\r\\n    //         for (uint i = 0; i < agreements.length; i++)\\r\\n    //             if (keccak256(abi.encodePacked(agreements[i].consumerPublicKey)) == keccak256(abi.encodePacked(_consumerPublicKey))){\\r\\n    //                 consumerAgreements[k++] = agreements[i];\\r\\n    //             }\\r\\n    //     }\\r\\n    //     return consumerAgreements;\\r\\n    // }\\r\\n\\r\\n    // function checkAgreementsByProvider (Agreement[] storage agreements, string memory _providerPublicKey, bool active, Counter storage counter) external view returns (Agreement[] memory) {\\r\\n    //     uint256 k = 0;\\r\\n    //     Agreement[] memory providerAgreements;\\r\\n    //     if(active) {\\r\\n    //         providerAgreements = new Agreement[](counter.providerActiveCount[_providerPublicKey]);\\r\\n    //         for (uint i = 0; i < agreements.length; i++)\\r\\n    //             if (agreements[i].state == State.Active && keccak256(abi.encodePacked(agreements[i].providerPublicKey)) == keccak256(abi.encodePacked(_providerPublicKey))){\\r\\n    //                 providerAgreements[k++] = agreements[i];\\r\\n    //             }  \\r\\n    //     }\\r\\n    //     else {\\r\\n    //         providerAgreements = new Agreement[](counter.providerCount[_providerPublicKey]);\\r\\n    //         for (uint i = 0; i < agreements.length; i++)\\r\\n    //             if (keccak256(abi.encodePacked(agreements[i].providerPublicKey)) == keccak256(abi.encodePacked(_providerPublicKey))){\\r\\n    //                 providerAgreements[k++] = agreements[i];\\r\\n    //             }\\r\\n    //     }\\r\\n    //     return providerAgreements;\\r\\n    // }\\r\\n\\r\\n\\r\\n    function checkAgreementsByDataOffering (Agreement[] storage agreements, string memory _dataOffering, Counter storage counter) external view returns (Agreement[] memory) {\\r\\n        Agreement[] memory dataOfferingAgreements = new Agreement[](counter.dataOfferingCount[_dataOffering]);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if (keccak256(abi.encodePacked(agreements[i].dataOffering.dataOfferingId)) == keccak256(abi.encodePacked(_dataOffering))) {\\r\\n                dataOfferingAgreements[k++] = agreements[i];\\r\\n            }\\r\\n        }\\r\\n        return dataOfferingAgreements;\\r\\n    }\\r\\n\\r\\n      \\r\\n    function retrieveAgreements (Agreement[] storage agreements, string memory _consumerPublicKey, Counter storage counter) external view returns (Agreement[] memory, uint256 k) {\\r\\n\\r\\n        Agreement[] memory consumerPublicKeyAgreements = new Agreement[](counter.consumerActiveCount[_consumerPublicKey]);\\r\\n     \\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if (agreements[i].state == State.Active && agreements[i].agreementDates[1]<=block.timestamp && keccak256(abi.encodePacked(agreements[i].consumerPublicKey)) == keccak256(abi.encodePacked(_consumerPublicKey))) {\\r\\n                consumerPublicKeyAgreements[k++] = agreements[i];\\r\\n            }\\r\\n        }\\r\\n        return (consumerPublicKeyAgreements, k);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DataSharingAgreement {\\r\\n\\r\\n    using AgreementLib for Agreement;\\r\\n\\r\\n    using AgreementLib for Counter;\\r\\n    \\r\\n    using RetrieveAgreementsLibrary for Agreement;\\r\\n\\r\\n    using GetAgreementsLibrary for Agreement;\\r\\n    \\r\\n    using AgreementViolationLibrary for Agreement;\\r\\n\\r\\n    Counter counter;\\r\\n\\r\\n    Agreement[] public agreements;\\r\\n\\r\\n    mapping(uint256 => string[]) agreementIdToPenalties;   \\r\\n\\r\\n    event AgreementActive(string providerPublicKey, string consumerPublicKey, uint256 id);\\r\\n    event PenaltyChoices(string consumerPublicKey, uint256 id, string[3] penaltyChoices);\\r\\n    event AgreeOnPenalty(string providerPublicKey, string consumerPublicKey, uint256 id, string chosenPenalty, uint256 newEndDate, uint256 price, uint256 fee);\\r\\n    event TerminationProposal(string publicKey, uint256 id);\\r\\n    event AgreementTerminated(string providerPublicKey, string consumerPublicKey,uint256 id);\\r\\n\\r\\n    function createAgreement(\\r\\n        string memory _providerPublicKey,\\r\\n        string memory _consumerPublicKey,\\r\\n        string memory _dataExchangeAgreementHash,\\r\\n        string[2] memory _signatures,\\r\\n        DataOffering memory dataOffering,\\r\\n        string memory _purpose,\\r\\n        uint256[] memory dates,\\r\\n        IntendedUse memory intendedUse,\\r\\n        LicenseGrant memory licenseGrant,\\r\\n        PricingModel memory pricingModel,\\r\\n        TypeOfData memory typeOfData\\r\\n    ) public {\\r\\n        Agreement memory agreement = AgreementLib.createAgreement(\\r\\n            _providerPublicKey,\\r\\n            _consumerPublicKey,\\r\\n            _dataExchangeAgreementHash,\\r\\n            _signatures,\\r\\n            dataOffering,\\r\\n            _purpose,\\r\\n            dates,\\r\\n            intendedUse,\\r\\n            licenseGrant,\\r\\n            pricingModel,\\r\\n            typeOfData,\\r\\n            counter\\r\\n        );\\r\\n        agreement.agreementId = agreements.length;\\r\\n        agreements.push(agreement);\\r\\n        emit AgreementActive(_providerPublicKey, _consumerPublicKey, agreements.length - 1);\\r\\n    }\\r\\n\\r\\n    function getAgreement(uint256 id) public view returns (Agreement memory) {\\r\\n        return agreements[id];\\r\\n    }\\r\\n\\r\\n    function getAgreementsLength() public view returns (uint256) {\\r\\n        return agreements.length;\\r\\n    } \\r\\n\\r\\n    function getState(uint256 id) public view returns (State) {\\r\\n        return agreements[id].state;\\r\\n    } \\r\\n\\r\\n    function checkActiveAgreements() public view returns(Agreement[] memory) {\\r\\n        Agreement[] memory activeAgreements = RetrieveAgreementsLibrary.checkActiveAgreements(agreements, counter);\\r\\n        return activeAgreements;\\r\\n    }\\r\\n\\r\\n    // function checkAgreementsByProvider(string memory _providerPublicKey, bool active) public view returns(Agreement[] memory) {\\r\\n    //     Agreement[] memory agreementsByProvider = RetrieveAgreementsLibrary.checkAgreementsByProvider(agreements, _providerPublicKey, active, counter);\\r\\n    //     return agreementsByProvider;\\r\\n    // }\\r\\n\\r\\n     function getAgreementsByProvider(string[] memory _providerPublicKeys, bool active) public view returns(Agreement[] memory) {\\r\\n        Agreement[] memory agreementsByProvider = GetAgreementsLibrary.getAgreementsByProvider(agreements,_providerPublicKeys, active, counter);\\r\\n        return agreementsByProvider;\\r\\n    }\\r\\n   \\r\\n    function getAgreementsByConsumer(string[] memory _consumerPublicKeys, bool active) public view returns(Agreement[] memory) {\\r\\n        Agreement[] memory agreementsByConsumer = GetAgreementsLibrary.getAgreementsByConsumer(agreements,_consumerPublicKeys, active, counter);\\r\\n        return agreementsByConsumer;\\r\\n    }\\r\\n\\r\\n    // function checkAgreementsByConsumer(string memory _consumerPublicKey, bool active) public view returns(Agreement[] memory) {\\r\\n    //     Agreement[] memory agreementsByConsumer = RetrieveAgreementsLibrary.checkAgreementsByConsumer(agreements,_consumerPublicKey, active, counter);\\r\\n    //     return agreementsByConsumer;\\r\\n    // }\\r\\n\\r\\n     function checkAgreementsByDataOffering(string memory _dataOfferingId) public view returns(Agreement[] memory) {\\r\\n        Agreement[] memory agreementsByDataOffering = RetrieveAgreementsLibrary.checkAgreementsByDataOffering(agreements,_dataOfferingId, counter);\\r\\n        return agreementsByDataOffering;\\r\\n    }\\r\\n\\r\\n    function retrieveAgreements(string memory _consumerPublicKey) external view returns (Agreement[] memory, uint256 k) {\\r\\n        return RetrieveAgreementsLibrary.retrieveAgreements(agreements,_consumerPublicKey, counter);\\r\\n    }\\r\\n\\r\\n    function evaluateSignedResolution(uint256 _agreementId, string memory _proofType, string memory _type, string memory _resolution,\\r\\n                                string memory _dataExchangeId, uint256 _iat, string memory _iss, string memory _sub) public{ \\r\\n\\r\\n      AgreementViolationLibrary.evaluateResolution(agreements[_agreementId], _proofType, _type, _resolution, _dataExchangeId, _iat, _iss, _sub, counter);\\r\\n      emit PenaltyChoices(agreements[_agreementId].consumerPublicKey, _agreementId, agreements[_agreementId].violation.penaltyChoices);\\r\\n    }\\r\\n\\r\\n    function retrievePricingModel(uint256 _agreementId) public view returns (PricingModel memory){\\r\\n        return agreements[_agreementId].pricingModel;\\r\\n    }\\r\\n\\r\\n     function requestAgreementTermination(uint256 agreementId, string memory _publicKey) public {\\r\\n        require(keccak256(abi.encodePacked(agreements[agreementId].providerPublicKey)) == keccak256(abi.encodePacked(_publicKey)) || keccak256(abi.encodePacked(agreements[agreementId].consumerPublicKey)) == keccak256(abi.encodePacked(_publicKey)));\\r\\n        agreements[agreementId].termination = true; \\r\\n        if(keccak256(abi.encodePacked(agreements[agreementId].providerPublicKey)) == keccak256(abi.encodePacked(_publicKey)))\\r\\n            emit TerminationProposal(agreements[agreementId].consumerPublicKey, agreements[agreementId].agreementId);\\r\\n        else\\r\\n            emit TerminationProposal(agreements[agreementId].providerPublicKey, agreements[agreementId].agreementId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function terminateAgreement(uint256 _agreementId) public{ \\r\\n      AgreementLib.terminateAgreement(agreements[_agreementId], counter);\\r\\n      if(agreements[_agreementId].state == State.Terminated){\\r\\n            emit AgreementTerminated(agreements[_agreementId].providerPublicKey, agreements[_agreementId].consumerPublicKey, _agreementId); \\r\\n      }\\r\\n\\t}\\r\\n\\r\\n    function enforcePenalty ( uint256 _id, string memory _chosenPenalty, uint256 _price, uint256 _fee, uint256 _newEndDate) public {\\r\\n        require((agreements[_id].state == State.Violated), \\\"Agreement must be violated in order to enforce penalty\\\");\\r\\n        if(keccak256(abi.encodePacked(_chosenPenalty)) == keccak256(abi.encodePacked(\\\"Terminate\\\"))){\\r\\n            agreements[_id].termination = true;\\r\\n            terminateAgreement(_id);\\r\\n        }\\r\\n        else{\\r\\n            AgreementViolationLibrary.enforcePenalty (agreements[_id], _chosenPenalty, _price, _fee, _newEndDate, counter);\\r\\n            emit AgreeOnPenalty(agreements[_id].providerPublicKey, agreements[_id].consumerPublicKey,\\r\\n                 agreements[_id].agreementId, _chosenPenalty, _newEndDate,_price, _fee);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function notifyConsentRevoked( string memory _dataOfferingId) public view returns (string[] memory) {    \\r\\n        string[] memory consumers = new string[](counter.dataOfferingCount[_dataOfferingId]); \\r\\n        uint256 k = 0; \\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if (keccak256(abi.encodePacked(agreements[i].dataOffering.dataOfferingId)) == keccak256(abi.encodePacked(_dataOfferingId))) {\\r\\n                consumers[k++]=agreements[i].consumerPublicKey; \\r\\n            }\\r\\n        }\\r\\n        return consumers;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x11f124f4ae5dd63e05bbb90bd467e54d8d1f40b18553d797a8ba7b480dfbde31\"},\"contracts/ExplicitUserConsent.sol\":{\"content\":\"// /*\\r\\n\\r\\n// * Copyright (c) Siemens AG, 2020-2022\\r\\n\\r\\n// *\\r\\n\\r\\n// * Authors:\\r\\n\\r\\n// * Susanne Stahnke <susanne.stahnke@siemens.com>,\\r\\n\\r\\n// * Yvonne Kovacs <yvonne.kovacs@siemens.com>\\r\\n\\r\\n// *\\r\\n\\r\\n// * This work is licensed under the terms of Apache 2.0. See\\r\\n\\r\\n// * the LICENSE file in the top-level directory.\\r\\n\\r\\n// */\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"./Agreement.sol\\\";\\r\\n\\r\\ncontract ExplicitUserConsent {\\r\\n\\r\\n    struct Consent {\\r\\n        string dataOfferingId;\\r\\n        string consentSubject;\\r\\n        address consentOperator;\\r\\n        string consentFormHash;\\r\\n        uint256 startDate;\\r\\n        uint256 endDate;\\r\\n        uint256 status;\\r\\n    }\\r\\n\\r\\n    mapping(string => Consent[]) consents;\\r\\n\\r\\n    event ConsentGiven(string dataOfferingId, string[] consentSubjects);\\r\\n    event ConsentRevoked(string[] consumers, string dataOfferingId, string[] consentSubjects);\\r\\n\\r\\n    function giveConsent(\\r\\n        string memory _dataOfferingId,\\r\\n        string[] memory _consentSubjects,\\r\\n        string memory _consentFormHash,\\r\\n        uint256 _startDate,\\r\\n        uint256 _endDate\\r\\n    ) public {\\r\\n        require(_startDate>=block.timestamp);\\r\\n        require(_endDate>=_startDate);\\r\\n        for(uint256 i=0; i< _consentSubjects.length; i++) {\\r\\n            Consent memory consent;\\r\\n            consent.dataOfferingId = _dataOfferingId;\\r\\n            consent.consentSubject = _consentSubjects[i];\\r\\n            consent.consentOperator = msg.sender;\\r\\n            consent.consentFormHash = _consentFormHash;\\r\\n            consent.startDate = _startDate;\\r\\n            consent.endDate = _endDate;\\r\\n            consent.status = _endDate; \\r\\n\\r\\n            consents[_dataOfferingId].push(consent);\\r\\n        }\\r\\n        emit ConsentGiven(_dataOfferingId, _consentSubjects);\\r\\n    }\\r\\n\\r\\n\\r\\n    function checkConsentStatus(string memory _dataOfferingId, string memory _consentSubject)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory) \\r\\n    {\\r\\n        Consent[] memory consentsByDataOffering = consents[_dataOfferingId];\\r\\n        uint256 length = consentsByDataOffering.length;\\r\\n        uint256[] memory consentsStatus;\\r\\n        uint256 k = 0;\\r\\n\\r\\n        bytes memory emptyString = bytes(_consentSubject); \\r\\n        if (emptyString.length == 0) {\\r\\n            consentsStatus = new uint256[](length);\\r\\n            for (uint256 i = 0; i < length; i++) {                 \\r\\n                if (block.timestamp > consentsByDataOffering[i].endDate){ \\r\\n                    consentsByDataOffering[i].status = 0; \\r\\n                }\\r\\n                 consentsStatus[k++] = consentsByDataOffering[i].status;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            consentsStatus = new uint256[](1);\\r\\n            for (uint256 i = length-1; i >= 0; i--) {\\r\\n                if (block.timestamp > consentsByDataOffering[i].endDate){\\r\\n                    consentsByDataOffering[i].status = 0; \\r\\n                }\\r\\n                if(keccak256(abi.encodePacked(consentsByDataOffering[i].consentSubject)) == keccak256(abi.encodePacked(_consentSubject))){\\r\\n                    consentsStatus[k++] = consentsByDataOffering[i].status;\\r\\n                    break;\\r\\n                }\\r\\n            }       \\r\\n        }\\r\\n        \\r\\n        return consentsStatus;\\r\\n    }\\r\\n\\r\\n    function revokeConsent( address _addr, string memory _dataOfferingId, string[] memory _consentSubjects) public {\\r\\n\\r\\n        Consent[] memory consentsByDataOffering = consents[_dataOfferingId];\\r\\n        uint256 length = consentsByDataOffering.length;\\r\\n        if (_consentSubjects.length == 0) {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                require(consents[_dataOfferingId][i].consentOperator == msg.sender);\\r\\n                consents[_dataOfferingId][i].status = 0;\\r\\n            }\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                require(consents[_dataOfferingId][i].consentOperator == msg.sender);\\r\\n                for (uint256 j = 0; j < _consentSubjects.length; j++)\\r\\n                    if (keccak256(abi.encodePacked(consentsByDataOffering[i].consentSubject)) == keccak256(abi.encodePacked(_consentSubjects[j])))\\r\\n                        consents[_dataOfferingId][i].status = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        DataSharingAgreement agreement = DataSharingAgreement(_addr);\\r\\n\\r\\n        string[] memory consumers = agreement.notifyConsentRevoked(_dataOfferingId);\\r\\n\\r\\n        emit ConsentRevoked(consumers, _dataOfferingId, _consentSubjects);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10423fcc32ec4728b4374f363355e226ba0638ea3edba849636749d2dd4eda1b\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063ae55e4a214610046578063cf04126b1461006f578063ed59bbb514610084575b600080fd5b610059610054366004610e15565b610097565b6040516100669190610e79565b60405180910390f35b61008261007d366004610f60565b61055e565b005b610082610092366004610ffa565b610745565b6060600080846040516100aa91906110ac565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156102f557838290600052602060002090600702016040518060e001604052908160008201805461010b906110c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610137906110c8565b80156101845780601f1061015957610100808354040283529160200191610184565b820191906000526020600020905b81548152906001019060200180831161016757829003601f168201915b5050505050815260200160018201805461019d906110c8565b80601f01602080910402602001604051908101604052809291908181526020018280546101c9906110c8565b80156102165780601f106101eb57610100808354040283529160200191610216565b820191906000526020600020905b8154815290600101906020018083116101f957829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382018054604090920191610246906110c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610272906110c8565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050815260200190600101906100d8565b5050825186519394509260609250600091508690610406578367ffffffffffffffff81111561032657610326610d50565b60405190808252806020026020018201604052801561034f578160200160208202803683370190505b50925060005b848110156104005785818151811061036f5761036f611103565b602002602001015160a001514211156103a757600086828151811061039657610396611103565b602002602001015160c00181815250505b8581815181106103b9576103b9611103565b602002602001015160c001518484806103d19061112f565b9550815181106103e3576103e3611103565b6020908102919091010152806103f88161112f565b915050610355565b50610552565b6040805160018082528183019092529060208083019080368337019050509250600061043360018661114a565b90505b85818151811061044857610448611103565b602002602001015160a0015142111561048057600086828151811061046f5761046f611103565b602002602001015160c00181815250505b8760405160200161049191906110ac565b604051602081830303815290604052805190602001208682815181106104b9576104b9611103565b6020026020010151602001516040516020016104d591906110ac565b60405160208183030381529060405280519060200120141561053e5785818151811061050357610503611103565b602002602001015160c0015184848061051b9061112f565b95508151811061052d5761052d611103565b602002602001018181525050610550565b8061054881611161565b915050610436565b505b50909695505050505050565b4282101561056b57600080fd5b8181101561057857600080fd5b60005b8451811015610704576105cd6040518060e00160405280606081526020016060815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081525090565b86815285518690839081106105e4576105e4611103565b6020908102919091018101519082015233604080830191909152606082018690526080820185905260a0820184905260c08201849052516000906106299089906110ac565b90815260405160209181900382019020805460018101825560009182529082902083518051859460079094029092019261066892849290910190610cb7565b5060208281015180516106819260018501920190610cb7565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015180516106d0916003840191602090910190610cb7565b506080820151600482015560a0820151600582015560c09091015160069091015550806106fc8161112f565b91505061057b565b507f0cd3ad4ea5f5d7b0d61f83fd8ddfa39af2844eb35e62c2e169fb28bf92def32985856040516107369291906111f9565b60405180910390a15050505050565b6000808360405161075691906110ac565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156109a157838290600052602060002090600702016040518060e00160405290816000820180546107b7906110c8565b80601f01602080910402602001604051908101604052809291908181526020018280546107e3906110c8565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b50505050508152602001600182018054610849906110c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610875906110c8565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b505050918352505060028201546001600160a01b031660208201526003820180546040909201916108f2906110c8565b80601f016020809104026020016040519081016040528092919081815260200182805461091e906110c8565b801561096b5780601f106109405761010080835404028352916020019161096b565b820191906000526020600020905b81548152906001019060200180831161094e57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505081526020019060010190610784565b505050509050600081519050825160001415610a7e5760005b81811015610a7857336001600160a01b03166000866040516109dc91906110ac565b908152602001604051809103902082815481106109fb576109fb611103565b60009182526020909120600260079092020101546001600160a01b031614610a2257600080fd5b60008086604051610a3391906110ac565b90815260200160405180910390208281548110610a5257610a52611103565b600091825260209091206006600790920201015580610a708161112f565b9150506109ba565b50610bec565b60005b81811015610bea57336001600160a01b0316600086604051610aa391906110ac565b90815260200160405180910390208281548110610ac257610ac2611103565b60009182526020909120600260079092020101546001600160a01b031614610ae957600080fd5b60005b8451811015610bd757848181518110610b0757610b07611103565b6020026020010151604051602001610b1f91906110ac565b60405160208183030381529060405280519060200120848381518110610b4757610b47611103565b602002602001015160200151604051602001610b6391906110ac565b604051602081830303815290604052805190602001201415610bc55760008087604051610b9091906110ac565b90815260200160405180910390208381548110610baf57610baf611103565b9060005260206000209060070201600601819055505b80610bcf8161112f565b915050610aec565b5080610be28161112f565b915050610a81565b505b6040516332893afb60e01b815285906000906001600160a01b038316906332893afb90610c1d908990600401611227565b60006040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c719190810190611241565b90507f633abc2421175557a8a5f1eb3b51f77faf6890ac4caf7f5b843994ed2deac55a818787604051610ca69392919061132e565b60405180910390a150505050505050565b828054610cc3906110c8565b90600052602060002090601f016020900481019282610ce55760008555610d2b565b82601f10610cfe57805160ff1916838001178555610d2b565b82800160010185558215610d2b579182015b82811115610d2b578251825591602001919060010190610d10565b50610d37929150610d3b565b5090565b5b80821115610d375760008155600101610d3c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d8f57610d8f610d50565b604052919050565b600067ffffffffffffffff821115610db157610db1610d50565b50601f01601f191660200190565b600082601f830112610dd057600080fd5b8135610de3610dde82610d97565b610d66565b818152846020838601011115610df857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610e2857600080fd5b823567ffffffffffffffff80821115610e4057600080fd5b610e4c86838701610dbf565b93506020850135915080821115610e6257600080fd5b50610e6f85828601610dbf565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561055257835183529284019291840191600101610e95565b600067ffffffffffffffff821115610ecb57610ecb610d50565b5060051b60200190565b600082601f830112610ee657600080fd5b81356020610ef6610dde83610eb1565b82815260059290921b84018101918181019086841115610f1557600080fd5b8286015b84811015610f5557803567ffffffffffffffff811115610f395760008081fd5b610f478986838b0101610dbf565b845250918301918301610f19565b509695505050505050565b600080600080600060a08688031215610f7857600080fd5b853567ffffffffffffffff80821115610f9057600080fd5b610f9c89838a01610dbf565b96506020880135915080821115610fb257600080fd5b610fbe89838a01610ed5565b95506040880135915080821115610fd457600080fd5b50610fe188828901610dbf565b9598949750949560608101359550608001359392505050565b60008060006060848603121561100f57600080fd5b83356001600160a01b038116811461102657600080fd5b9250602084013567ffffffffffffffff8082111561104357600080fd5b61104f87838801610dbf565b9350604086013591508082111561106557600080fd5b5061107286828701610ed5565b9150509250925092565b60005b8381101561109757818101518382015260200161107f565b838111156110a6576000848401525b50505050565b600082516110be81846020870161107c565b9190910192915050565b600181811c908216806110dc57607f821691505b602082108114156110fd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561114357611143611119565b5060010190565b60008282101561115c5761115c611119565b500390565b60008161117057611170611119565b506000190190565b6000815180845261119081602086016020860161107c565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156111ec5782840389526111da848351611178565b988501989350908401906001016111c2565b5091979650505050505050565b60408152600061120c6040830185611178565b828103602084015261121e81856111a4565b95945050505050565b60208152600061123a6020830184611178565b9392505050565b6000602080838503121561125457600080fd5b825167ffffffffffffffff8082111561126c57600080fd5b818501915085601f83011261128057600080fd5b815161128e610dde82610eb1565b81815260059190911b830184019084810190888311156112ad57600080fd5b8585015b83811015611321578051858111156112c95760008081fd5b8601603f81018b136112db5760008081fd5b8781015160406112ed610dde83610d97565b8281528d828486010111156113025760008081fd5b611311838c830184870161107c565b86525050509186019186016112b1565b5098975050505050505050565b60608152600061134160608301866111a4565b82810360208401526113538186611178565b9050828103604084015261136781856111a4565b969550505050505056fea2646970667358221220ad8f30198d47cf546a52cacf4f85d11c97389524dd3e0b9e68f026d6c4e84fc964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2219,
        "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
        "label": "consents",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(Consent)2213_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Consent)2213_storage)dyn_storage": {
        "base": "t_struct(Consent)2213_storage",
        "encoding": "dynamic_array",
        "label": "struct ExplicitUserConsent.Consent[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(Consent)2213_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ExplicitUserConsent.Consent[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Consent)2213_storage)dyn_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Consent)2213_storage": {
        "encoding": "inplace",
        "label": "struct ExplicitUserConsent.Consent",
        "members": [
          {
            "astId": 2200,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "dataOfferingId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2202,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "consentSubject",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2204,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "consentOperator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2206,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "consentFormHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2208,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2210,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "endDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2212,
            "contract": "contracts/ExplicitUserConsent.sol:ExplicitUserConsent",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}