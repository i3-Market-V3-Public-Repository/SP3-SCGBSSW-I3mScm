{
  "address": "0xE5B7A20A9C502Cb095fF3CefcB9A20968Fbd43c7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "consumerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "consumerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AgreementSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "consumerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AgreementTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "consumerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AgreementUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "consumerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "SignedResolutionEvaluated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "agreementViolation",
      "outputs": [
        {
          "internalType": "contract AgreementViolation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "providerPublicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "consumerPublicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataExchangeAgreementHash",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dataOfferingId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "dataOfferingVersion",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataSharingAgreement.DataOffering",
          "name": "dataOffering",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "purpose",
          "type": "string"
        },
        {
          "internalType": "enum DataSharingAgreement.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "providerId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "consumerId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "processData",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "shareDataWithThirdParty",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "editData",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.IntendedUse",
          "name": "intendedUse",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "copyData",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exclusiveness",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.LicenseGrant",
          "name": "licenseGrant",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "dataStream",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "signed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkActiveAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "providerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataExchangeAgreementHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dataOfferingId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "dataOfferingVersion",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataSharingAgreement.DataOffering",
              "name": "dataOffering",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "enum DataSharingAgreement.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "providerId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerId",
              "type": "string"
            },
            {
              "internalType": "uint256[3]",
              "name": "agreementDates",
              "type": "uint256[3]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "processData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shareDataWithThirdParty",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "editData",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.IntendedUse",
              "name": "intendedUse",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "copyData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "transferable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exclusiveness",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.LicenseGrant",
              "name": "licenseGrant",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "dataStream",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_consumerId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "checkAgreementsByConsumer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "providerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataExchangeAgreementHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dataOfferingId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "dataOfferingVersion",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataSharingAgreement.DataOffering",
              "name": "dataOffering",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "enum DataSharingAgreement.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "providerId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerId",
              "type": "string"
            },
            {
              "internalType": "uint256[3]",
              "name": "agreementDates",
              "type": "uint256[3]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "processData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shareDataWithThirdParty",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "editData",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.IntendedUse",
              "name": "intendedUse",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "copyData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "transferable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exclusiveness",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.LicenseGrant",
              "name": "licenseGrant",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "dataStream",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dataOffering",
          "type": "string"
        }
      ],
      "name": "checkAgreementsByDataOffering",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "providerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataExchangeAgreementHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dataOfferingId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "dataOfferingVersion",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataSharingAgreement.DataOffering",
              "name": "dataOffering",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "enum DataSharingAgreement.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "providerId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerId",
              "type": "string"
            },
            {
              "internalType": "uint256[3]",
              "name": "agreementDates",
              "type": "uint256[3]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "processData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shareDataWithThirdParty",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "editData",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.IntendedUse",
              "name": "intendedUse",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "copyData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "transferable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exclusiveness",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.LicenseGrant",
              "name": "licenseGrant",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "dataStream",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_providerId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "checkAgreementsByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "providerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataExchangeAgreementHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dataOfferingId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "dataOfferingVersion",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataSharingAgreement.DataOffering",
              "name": "dataOffering",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "enum DataSharingAgreement.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "providerId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerId",
              "type": "string"
            },
            {
              "internalType": "uint256[3]",
              "name": "agreementDates",
              "type": "uint256[3]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "processData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shareDataWithThirdParty",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "editData",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.IntendedUse",
              "name": "intendedUse",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "copyData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "transferable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exclusiveness",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.LicenseGrant",
              "name": "licenseGrant",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "dataStream",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_providerPublicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_consumerPublicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dataExchangeAgreementHash",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dataOfferingId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "dataOfferingVersion",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataSharingAgreement.DataOffering",
          "name": "dataOffering",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_purpose",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_providerId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_consumerId",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "dates",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "processData",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "shareDataWithThirdParty",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "editData",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.IntendedUse",
          "name": "intendedUse",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "copyData",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exclusiveness",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.LicenseGrant",
          "name": "licenseGrant",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_dataStream",
          "type": "bool"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agreementId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_proofType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_type",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_resolution",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dataExchangeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_iat",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_iss",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sub",
          "type": "string"
        }
      ],
      "name": "evaluateSignedResolution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAgreement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "providerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataExchangeAgreementHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dataOfferingId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "dataOfferingVersion",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataSharingAgreement.DataOffering",
              "name": "dataOffering",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "enum DataSharingAgreement.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "providerId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerId",
              "type": "string"
            },
            {
              "internalType": "uint256[3]",
              "name": "agreementDates",
              "type": "uint256[3]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "processData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shareDataWithThirdParty",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "editData",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.IntendedUse",
              "name": "intendedUse",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "copyData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "transferable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exclusiveness",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.LicenseGrant",
              "name": "licenseGrant",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "dataStream",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAgreementsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum DataSharingAgreement.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agreementId",
          "type": "uint256"
        }
      ],
      "name": "presentPenaltyChoices",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_consumerPublicKey",
          "type": "string"
        }
      ],
      "name": "retrieveAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "providerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerPublicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataExchangeAgreementHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dataOfferingId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "dataOfferingVersion",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataSharingAgreement.DataOffering",
              "name": "dataOffering",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "enum DataSharingAgreement.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "providerId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumerId",
              "type": "string"
            },
            {
              "internalType": "uint256[3]",
              "name": "agreementDates",
              "type": "uint256[3]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "processData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shareDataWithThirdParty",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "editData",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.IntendedUse",
              "name": "intendedUse",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "copyData",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "transferable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exclusiveness",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataSharingAgreement.LicenseGrant",
              "name": "licenseGrant",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "dataStream",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.Agreement[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_consumerId",
          "type": "string"
        }
      ],
      "name": "signAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "terminateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_providerPublicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_consumerPublicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dataOfferingId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_purpose",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_providerId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_consumerId",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "dates",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "processData",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "shareDataWithThirdParty",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "editData",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.IntendedUse",
          "name": "intendedUse",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "copyData",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exclusiveness",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct DataSharingAgreement.LicenseGrant",
          "name": "licenseGrant",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_dataStream",
          "type": "bool"
        }
      ],
      "name": "updateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x20a9803cdbfb78b9776cb454838b4176bd74b022a50f7f3bca7e73f6fdd7ad8a",
  "receipt": {
    "to": null,
    "from": "0x580d142D0c2958d843499553275e427Da4Ab7Eb5",
    "contractAddress": "0xE5B7A20A9C502Cb095fF3CefcB9A20968Fbd43c7",
    "transactionIndex": 0,
    "gasUsed": "6113079",
    "logsBloom": "0x
    "blockHash": "0x45ba671b35eef978d20433e2f73e88ed6ee7773d93d6b672541f633d9ef2a361",
    "transactionHash": "0x20a9803cdbfb78b9776cb454838b4176bd74b022a50f7f3bca7e73f6fdd7ad8a",
    "logs": [],
    "blockNumber": 450128,
    "cumulativeGasUsed": "6113079",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f7e3049beecb2689d1be10f599fa4e46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AgreementSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SignedResolutionEvaluated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agreementViolation\",\"outputs\":[{\"internalType\":\"contract AgreementViolation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkActiveAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[3]\",\"name\":\"agreementDates\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_consumerId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"checkAgreementsByConsumer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[3]\",\"name\":\"agreementDates\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dataOffering\",\"type\":\"string\"}],\"name\":\"checkAgreementsByDataOffering\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[3]\",\"name\":\"agreementDates\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_providerId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"checkAgreementsByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[3]\",\"name\":\"agreementDates\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_purpose\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_dataStream\",\"type\":\"bool\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_proofType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_resolution\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dataExchangeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_iat\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_iss\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sub\",\"type\":\"string\"}],\"name\":\"evaluateSignedResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAgreement\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[3]\",\"name\":\"agreementDates\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgreementsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agreementId\",\"type\":\"uint256\"}],\"name\":\"presentPenaltyChoices\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_consumerPublicKey\",\"type\":\"string\"}],\"name\":\"retrieveAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataExchangeAgreementHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dataOfferingVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DataSharingAgreement.DataOffering\",\"name\":\"dataOffering\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"enum DataSharingAgreement.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[3]\",\"name\":\"agreementDates\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"dataStream\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_consumerId\",\"type\":\"string\"}],\"name\":\"signAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_providerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_consumerPublicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dataOfferingId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_purpose\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_providerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_consumerId\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"processData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shareDataWithThirdParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editData\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.IntendedUse\",\"name\":\"intendedUse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"copyData\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exclusiveness\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct DataSharingAgreement.LicenseGrant\",\"name\":\"licenseGrant\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_dataStream\",\"type\":\"bool\"}],\"name\":\"updateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Agreement.sol\":\"DataSharingAgreement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"contracts/Agreement.sol\":{\"content\":\"/*\\r\\n* Copyright (c) Siemens AG, 2020-2022\\r\\n*\\r\\n* Authors:\\r\\n*  Susanne Stahnke <susanne.stahnke@siemens.com>,\\r\\n*  Yvonne Kovacs <yvonne.kovacs@siemens.com> \\r\\n*\\r\\n* This work is licensed under the terms of Apache 2.0.  See\\r\\n* the LICENSE file in the top-level directory.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"./AgreementViolation.sol\\\";\\r\\n\\r\\ncontract DataSharingAgreement {\\r\\n\\r\\n    AgreementViolation public agreementViolation = new AgreementViolation();\\r\\n\\r\\n    enum State { Created, Active, Updated, Violated, Terminated }\\r\\n\\r\\n    struct Agreement {\\r\\n        uint256 agreementId;\\r\\n        string providerPublicKey;\\r\\n        string consumerPublicKey;\\r\\n        string dataExchangeAgreementHash;\\r\\n        DataOffering dataOffering;\\r\\n        string purpose;\\r\\n        State state;\\r\\n        string providerId;\\r\\n        string consumerId;\\r\\n        uint256[3] agreementDates;\\r\\n        IntendedUse intendedUse;\\r\\n        LicenseGrant licenseGrant;\\r\\n        bool dataStream;\\r\\n        bool signed;\\r\\n    }\\r\\n\\r\\n    struct DataOffering {\\r\\n        string dataOfferingId; \\r\\n        uint256 dataOfferingVersion;\\r\\n    }\\r\\n    \\r\\n    struct IntendedUse {\\r\\n        bool processData;\\r\\n        bool shareDataWithThirdParty;\\r\\n        bool editData;\\r\\n    }\\r\\n    \\r\\n    struct LicenseGrant {\\r\\n        bool copyData;\\r\\n        bool transferable;\\r\\n        bool exclusiveness;\\r\\n        bool revocable;\\r\\n    }\\r\\n\\r\\n    Agreement[] public agreements;\\r\\n\\r\\n    uint256 activeAgreementCount;\\r\\n    mapping (string => uint) providerCount;\\r\\n    mapping (string => uint) providerActiveCount;\\r\\n    mapping (string => uint) consumerCount;\\r\\n    mapping (string => uint) consumerActiveCount;\\r\\n    mapping (string => uint) consumerPublicKeyCount;\\r\\n    mapping (string => uint) dataOfferingCount;\\r\\n\\r\\n    event AgreementCreated(string providerId, string consumerId, uint256 id);\\r\\n    event AgreementUpdated(string providerId, string consumerId, uint256 id);\\r\\n    event AgreementSigned(string providerId, string consumerId, uint256 id);\\r\\n    event SignedResolutionEvaluated(string providerId, string consumerId, uint256 id);\\r\\n    event AgreementTerminated(string providerId, string consumerId,uint256 id);\\r\\n\\r\\n    function createAgreement(\\r\\n                            string memory _providerPublicKey,\\r\\n                            string memory _consumerPublicKey,\\r\\n                            string memory _dataExchangeAgreementHash,\\r\\n                            DataOffering memory dataOffering,\\r\\n                            string memory _purpose,\\r\\n                            string memory _providerId,\\r\\n                            string memory _consumerId,\\r\\n                            uint256[] memory dates,\\r\\n                            IntendedUse memory intendedUse,\\r\\n                            LicenseGrant memory licenseGrant,\\r\\n                            bool _dataStream\\r\\n                            ) public {\\r\\n                            \\r\\n        Agreement memory newAgreement;\\r\\n        newAgreement.providerPublicKey = _providerPublicKey;\\r\\n        newAgreement.consumerPublicKey = _consumerPublicKey;\\r\\n        newAgreement.dataExchangeAgreementHash = _dataExchangeAgreementHash;\\r\\n        newAgreement.dataOffering.dataOfferingId = dataOffering.dataOfferingId;\\r\\n        newAgreement.dataOffering.dataOfferingVersion = dataOffering.dataOfferingVersion;\\r\\n        newAgreement.purpose = _purpose;\\r\\n        newAgreement.providerId = _providerId;\\r\\n        newAgreement.consumerId = _consumerId;\\r\\n    \\r\\n        newAgreement.state = State.Created;\\r\\n        newAgreement.agreementDates[0] = dates[0]; \\r\\n        newAgreement.agreementDates[1] = dates[1];\\r\\n     \\r\\n        require ( dates[1] >= newAgreement.agreementDates[0], \\\"Start date must be after creation date.\\\" );\\r\\n        require ( dates[2] > dates[1], \\\"End date must be after start date.\\\" );\\r\\n        newAgreement.agreementDates[2] = dates[2];\\r\\n        \\r\\n        newAgreement.intendedUse.processData = intendedUse.processData;\\r\\n        newAgreement.intendedUse.shareDataWithThirdParty = intendedUse.shareDataWithThirdParty;\\r\\n        newAgreement.intendedUse.editData = intendedUse.editData;\\r\\n        \\r\\n        newAgreement.licenseGrant.copyData = licenseGrant.copyData;\\r\\n        newAgreement.licenseGrant.transferable = licenseGrant.transferable;\\r\\n        newAgreement.licenseGrant.exclusiveness = licenseGrant.exclusiveness;\\r\\n        newAgreement.licenseGrant.revocable = licenseGrant.revocable;\\r\\n        \\r\\n        newAgreement.dataStream = _dataStream;\\r\\n        \\r\\n\\r\\n        newAgreement.agreementId = agreements.length;\\r\\n        \\r\\n        agreements.push(newAgreement);\\r\\n\\r\\n        providerCount[_providerId]++;\\r\\n        consumerCount[_consumerId]++;\\r\\n        \\r\\n        dataOfferingCount[dataOffering.dataOfferingId]++;\\r\\n        \\r\\n        emit AgreementCreated(_providerId, _consumerId, agreements.length - 1);  \\r\\n    }\\r\\n    \\r\\n    function updateAgreement(uint256 _id,\\r\\n                            string memory _providerPublicKey,\\r\\n                            string memory _consumerPublicKey,\\r\\n                            string memory _dataOfferingId,\\r\\n                            string memory _purpose,\\r\\n                            string memory _providerId,\\r\\n                            string memory _consumerId,\\r\\n                            uint256[] memory dates,\\r\\n                            IntendedUse memory intendedUse,\\r\\n                            LicenseGrant memory licenseGrant,\\r\\n                            bool _dataStream) public {\\r\\n       \\r\\n        Agreement storage agreement = agreements[_id];  \\r\\n\\r\\n        require (keccak256(abi.encodePacked(agreements[_id].providerId)) == keccak256(abi.encodePacked(_providerId)), \\\"Not the provider of the agreement\\\" ); \\r\\n        \\r\\n        if(agreement.state == State.Active)\\r\\n        {\\r\\n            agreement.purpose = _purpose;\\r\\n            agreement.agreementDates[1] = dates[0];\\r\\n     \\r\\n            require ( dates[0] >= agreement.agreementDates[0], \\\"Start date must be after creation date.\\\" );\\r\\n            require ( dates[1] > dates[0], \\\"End date must be after start date.\\\" );\\r\\n            agreement.agreementDates[2] = dates[1];\\r\\n        \\r\\n            agreement.intendedUse.processData = intendedUse.processData;\\r\\n            agreement.intendedUse.shareDataWithThirdParty = intendedUse.shareDataWithThirdParty;\\r\\n            agreement.intendedUse.editData = intendedUse.editData;\\r\\n        \\r\\n            agreement.licenseGrant.copyData = licenseGrant.copyData;\\r\\n            agreement.licenseGrant.transferable = licenseGrant.transferable;\\r\\n            agreement.licenseGrant.exclusiveness = licenseGrant.exclusiveness;\\r\\n            agreement.licenseGrant.revocable = licenseGrant.revocable;\\r\\n\\r\\n            agreement.dataStream = _dataStream;\\r\\n\\r\\n            agreement.state = State.Updated;\\r\\n            agreements[_id].signed = false;\\r\\n            activeAgreementCount--;\\r\\n            providerActiveCount[_providerId]--;\\r\\n            consumerActiveCount[_consumerId]--;\\r\\n            consumerPublicKeyCount[_consumerPublicKey]--;\\r\\n\\r\\n            emit AgreementUpdated(_providerId, _consumerId, _id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function signAgreement (uint256 _id, string memory _consumerId) public {\\r\\n        require (keccak256(abi.encodePacked(agreements[_id].consumerId)) == keccak256(abi.encodePacked(_consumerId)), \\\"Not the consumer of agreement.\\\" );\\r\\n    \\r\\n        agreements[_id].signed = true;\\r\\n\\r\\n        if(agreements[_id].agreementDates[2]>=block.timestamp) {\\r\\n            agreements[_id].state = State.Active;\\r\\n            activeAgreementCount++;\\r\\n            providerActiveCount[agreements[_id].providerId]++;\\r\\n            consumerActiveCount[_consumerId]++;\\r\\n            consumerPublicKeyCount[agreements[_id].consumerPublicKey]++;\\r\\n            emit AgreementSigned(agreements[_id].providerId,_consumerId, _id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAgreement(uint256 id) public view returns (Agreement memory) {\\r\\n        return agreements[id];\\r\\n    }\\r\\n\\r\\n    function getAgreementsLength() public view returns (uint256) {\\r\\n        return agreements.length;\\r\\n    } \\r\\n\\r\\n     function getState(uint256 id) public view returns (State) {\\r\\n        return agreements[id].state;\\r\\n    } \\r\\n    \\r\\n    function checkActiveAgreements () external view returns (Agreement[] memory) {\\r\\n        Agreement[] memory activeAgreements = new Agreement[](activeAgreementCount);\\r\\n        uint counter = 0;\\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if(agreements[i].state == State.Active) {   \\r\\n                activeAgreements[counter++] = agreements[i];\\r\\n            }\\r\\n        }\\r\\n        return activeAgreements;\\r\\n    }\\r\\n\\r\\n    function checkAgreementsByConsumer (string memory _consumerId, bool active) external view returns (Agreement[] memory) {\\r\\n        uint256 counter = 0;\\r\\n        Agreement[] memory consumerAgreements;\\r\\n        if(active) {\\r\\n            consumerAgreements = new Agreement[](consumerActiveCount[_consumerId]);\\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                if (agreements[i].state == State.Active && keccak256(abi.encodePacked(agreements[i].consumerId)) == keccak256(abi.encodePacked(_consumerId))){\\r\\n                    consumerAgreements[counter++] = agreements[i];\\r\\n                }  \\r\\n        }\\r\\n        else {\\r\\n            consumerAgreements = new Agreement[](consumerCount[_consumerId]);\\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                if (keccak256(abi.encodePacked(agreements[i].consumerId)) == keccak256(abi.encodePacked(_consumerId))){\\r\\n                    consumerAgreements[counter++] = agreements[i];\\r\\n                }\\r\\n        }\\r\\n        return consumerAgreements;\\r\\n    }\\r\\n\\r\\n    function checkAgreementsByProvider (string memory _providerId, bool active) external view returns (Agreement[] memory) {\\r\\n        uint256 counter = 0;\\r\\n        Agreement[] memory providerAgreements;\\r\\n        if(active) {\\r\\n            providerAgreements = new Agreement[](providerActiveCount[_providerId]);\\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                if (agreements[i].state == State.Active && keccak256(abi.encodePacked(agreements[i].providerId)) == keccak256(abi.encodePacked(_providerId))){\\r\\n                    providerAgreements[counter++] = agreements[i];\\r\\n                }  \\r\\n        }\\r\\n        else {\\r\\n            providerAgreements = new Agreement[](providerCount[_providerId]);\\r\\n            for (uint i = 0; i < agreements.length; i++)\\r\\n                if (keccak256(abi.encodePacked(agreements[i].providerId)) == keccak256(abi.encodePacked(_providerId))){\\r\\n                    providerAgreements[counter++] = agreements[i];\\r\\n                }\\r\\n        }\\r\\n        return providerAgreements;\\r\\n    }\\r\\n\\r\\n    function checkAgreementsByDataOffering (string memory _dataOffering) external view returns (Agreement[] memory) {\\r\\n        Agreement[] memory dataOfferingAgreements = new Agreement[](dataOfferingCount[_dataOffering]);\\r\\n        uint counter = 0;\\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if (keccak256(abi.encodePacked(agreements[i].dataOffering.dataOfferingId)) == keccak256(abi.encodePacked(_dataOffering))) {\\r\\n                dataOfferingAgreements[counter++] = agreements[i];\\r\\n            }\\r\\n        }\\r\\n        return dataOfferingAgreements;\\r\\n    }\\r\\n     \\r\\n    function retrieveAgreements (string memory _consumerPublicKey) external view returns (Agreement[] memory, uint256 counter) {\\r\\n\\r\\n        Agreement[] memory consumerPublicKeyAgreements = new Agreement[](consumerPublicKeyCount[_consumerPublicKey]);\\r\\n        uint256 counter = 0;\\r\\n        for (uint i = 0; i < agreements.length; i++){\\r\\n            if (agreements[i].state == State.Active && agreements[i].agreementDates[1]<=block.timestamp && keccak256(abi.encodePacked(agreements[i].consumerPublicKey)) == keccak256(abi.encodePacked(_consumerPublicKey))) {\\r\\n                consumerPublicKeyAgreements[counter++] = agreements[i];\\r\\n            }\\r\\n        }\\r\\n        return (consumerPublicKeyAgreements, counter);\\r\\n      \\r\\n    }\\r\\n\\r\\n    function evaluateSignedResolution(uint256 _agreementId, string memory _proofType, string memory _type, string memory _resolution,\\r\\n                                string memory _dataExchangeId, uint256 _iat, string memory _iss, string memory _sub) public {\\r\\n\\r\\n      agreementViolation.evaluateResolution(_agreementId, _proofType, _type, _resolution, _dataExchangeId, _iat, _iss, _sub);\\r\\n      if(agreementViolation.getPenaltyChoices(_agreementId).length>0){\\r\\n        agreements[_agreementId].state=State.Violated;\\r\\n      }\\r\\n      emit SignedResolutionEvaluated(agreements[_agreementId].providerId, agreements[_agreementId].consumerId, _agreementId);\\r\\n\\r\\n\\t}\\r\\n\\r\\n    function presentPenaltyChoices(uint256 _agreementId) public view returns (string[] memory) { \\r\\n        return agreementViolation.getPenaltyChoices(_agreementId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function terminateAgreement(uint256 _id) public {\\r\\n        if(agreements[_id].agreementDates[2]<=block.timestamp){\\r\\n            if(agreements[_id].state == State.Active){\\r\\n                activeAgreementCount--;\\r\\n                providerActiveCount[agreements[_id].providerId]--;\\r\\n                consumerActiveCount[agreements[_id].consumerId]--;\\r\\n                consumerPublicKeyCount[agreements[_id].consumerPublicKey]--;\\r\\n            }     \\r\\n            agreements[_id].state = State.Terminated;\\r\\n            emit AgreementTerminated(agreements[_id].providerId,agreements[_id].consumerId, _id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x35b1d052c36f3b7df67558bc88e07fdeb3aee103cf6c9a4825684b32dcfbe9a6\"},\"contracts/AgreementViolation.sol\":{\"content\":\"// /*\\r\\n\\r\\n// * Copyright (c) Siemens AG, 2020-2022\\r\\n\\r\\n// *\\r\\n\\r\\n// * Authors:\\r\\n\\r\\n// * Susanne Stahnke <susanne.stahnke@siemens.com>,\\r\\n\\r\\n// * Yvonne Kovacs <yvonne.kovacs@siemens.com>\\r\\n\\r\\n// *\\r\\n\\r\\n// * This work is licensed under the terms of Apache 2.0. See\\r\\n\\r\\n// * the LICENSE file in the top-level directory.\\r\\n\\r\\n// */\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\ncontract AgreementViolation {\\r\\n    \\r\\n    enum ViolationType {\\r\\n        NotViolated,\\r\\n        PaymentNotCompleted,\\r\\n        DataNotTransferredAsDescribed,\\r\\n        DataNotAsDescribed,\\r\\n        LicenseViolated\\r\\n    }\\r\\n\\r\\n    enum ResolutionType { Verification, Dispute }\\r\\n    enum ResolutionState { Completed, NotCompleted, Accepted, Denied }\\r\\n\\r\\n    struct Violation {\\r\\n        ViolationType violationType;\\r\\n        string issuerId;\\r\\n    }\\r\\n\\r\\n    struct SignedResolution {\\r\\n        string proofType;\\r\\n        string resolutionType;\\r\\n        string resolution;\\r\\n        string dataExchangeId;\\r\\n        uint256 iat;\\r\\n        string iss;\\r\\n        string sub;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    mapping(uint256 => Violation) public violations;\\r\\n\\r\\n    mapping(uint256 => string) public penalties;\\r\\n\\r\\n    mapping(uint256 => string[]) public agreementIdToPenalties;\\r\\n\\r\\n    \\r\\n    function evaluateResolution(\\r\\n        uint256 _agreementId,\\r\\n        string memory _proofType,\\r\\n        string memory _type,\\r\\n        string memory _resolution,\\r\\n        string memory _dataExchangeId,\\r\\n        uint256 _iat,\\r\\n        string memory _iss,\\r\\n        string memory _sub) public { \\r\\n\\r\\n        SignedResolution memory signedResolution;\\r\\n        signedResolution.proofType = _proofType;\\r\\n        signedResolution.resolutionType = _type;\\r\\n        signedResolution.resolution = _resolution;\\r\\n        signedResolution.dataExchangeId = _dataExchangeId;\\r\\n        signedResolution.iat = _iat;\\r\\n        signedResolution.iss = _iss;   \\r\\n        signedResolution.sub = _sub;\\r\\n\\r\\n        if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"completed\\\"))){\\r\\n                            delete agreementIdToPenalties[_agreementId];\\r\\n             \\r\\n        }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"notCompleted\\\"))) { \\r\\n                //Decryption key not published (data tranfer not as described)\\r\\n                issueViolation(_agreementId,ViolationType.DataNotTransferredAsDescribed, signedResolution.sub);\\r\\n                setPenalties(_agreementId);       \\r\\n        }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"accepted\\\"))){ \\r\\n                issueViolation(_agreementId,ViolationType.DataNotTransferredAsDescribed, signedResolution.sub);\\r\\n                setPenalties(_agreementId);\\r\\n             }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"denied\\\")))\\r\\n                //The cipherblock can be properly decrypted\\r\\n                 delete agreementIdToPenalties[_agreementId];\\r\\n\\r\\n    }\\r\\n\\r\\n    function getPenaltyChoices(uint256 _agreementId) public view returns (string[] memory){\\r\\n        return agreementIdToPenalties[_agreementId];\\r\\n    }\\r\\n    \\r\\n\\r\\n    function issueViolation(uint256 _agreementId, ViolationType _violationType, string memory _issuerId) private {\\r\\n        violations[_agreementId] = Violation(_violationType, _issuerId);\\r\\n    }\\r\\n\\r\\n    function setPenalties(uint256 _agreementId) private {\\r\\n        agreementIdToPenalties[_agreementId].push(\\\"Terminate\\\");\\r\\n        agreementIdToPenalties[_agreementId].push(\\\"NewEndDate\\\");\\r\\n        agreementIdToPenalties[_agreementId].push(\\\"NewEndDateAndReductionOfPayment\\\"); \\r\\n    }\\r\\n\\r\\n    function getViolation(uint256 _agreementId) public view returns (Violation memory){\\r\\n        return violations[_agreementId];\\r\\n    }\\r\\n\\r\\n    function getPenalty(uint256 _agreementId) public view returns (string memory){\\r\\n        return penalties[_agreementId];\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x1e6d21b93cde7d01655a79cdcd8c9e836c162ed5fe81efa043148e070ffae99e\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051620000129062000064565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790553480156200005d57600080fd5b5062000072565b610e178062005f2a83390190565b615ea880620000826000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806365fa865f11610097578063a630518911610066578063a630518914610241578063ad9099a214610254578063bd14de9614610267578063dd4be34b1461029357600080fd5b806365fa865f146101e657806383a2fc1c146101f95780639a02692414610219578063a473ecb31461022e57600080fd5b8063464da40d116100d3578063464da40d14610175578063482e2203146101a05780634dffbf0d146101b35780634f9f6fe6146101c657600080fd5b8063063bd15a146101055780631c510ea91461012357806330937f3a1461013457806344c9af2814610155575b600080fd5b61010d6102a6565b60405161011a9190615228565b60405180910390f35b60015460405190815260200161011a565b610147610142366004615307565b6108f6565b60405161011a929190615344565b610168610163366004615366565b611023565b60405161011a919061537f565b600054610188906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d6101ae3660046153a2565b611055565b61010d6101c1366004615307565b611de0565b6101d96101d4366004615366565b612485565b60405161011a91906153f0565b61010d6101f43660046153a2565b6129f5565b61020c610207366004615366565b61376e565b60405161011a9190615403565b61022c610227366004615366565b6137ef565b005b61022c61023c3660046155de565b613a50565b61022c61024f366004615742565b613ed4565b61022c6102623660046157f8565b6141a6565b61027a610275366004615366565b61473b565b60405161011a9d9c9b9a999897969594939291906158a7565b61022c6102a13660046159c5565b614c06565b6060600060025467ffffffffffffffff8111156102c5576102c5615242565b6040519080825280602002602001820160405280156102fe57816020015b6102eb614dd1565b8152602001906001900390816102e35790505b5090506000805b6001548110156108ee57600180828154811061032357610323615acf565b600091825260209091206007601090920201015460ff16600481111561034b5761034b615003565b14156108dc576001818154811061036457610364615acf565b9060005260206000209060100201604051806101c00160405290816000820154815260200160018201805461039890615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546103c490615ae5565b80156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050815260200160028201805461042a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461045690615ae5565b80156104a35780601f10610478576101008083540402835291602001916104a3565b820191906000526020600020905b81548152906001019060200180831161048657829003601f168201915b505050505081526020016003820180546104bc90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546104e890615ae5565b80156105355780601f1061050a57610100808354040283529160200191610535565b820191906000526020600020905b81548152906001019060200180831161051857829003601f168201915b505050505081526020016004820160405180604001604052908160008201805461055e90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90615ae5565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b5050505050815260200160018201548152505081526020016006820180546105fe90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461062a90615ae5565b80156106775780601f1061064c57610100808354040283529160200191610677565b820191906000526020600020905b81548152906001019060200180831161065a57829003601f168201915b5050509183525050600782015460209091019060ff16600481111561069e5761069e615003565b60048111156106af576106af615003565b81526020016008820180546106c390615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546106ef90615ae5565b801561073c5780601f106107115761010080835404028352916020019161073c565b820191906000526020600020905b81548152906001019060200180831161071f57829003601f168201915b5050505050815260200160098201805461075590615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461078190615ae5565b80156107ce5780601f106107a3576101008083540402835291602001916107ce565b820191906000526020600020905b8154815290600101906020018083116107b157829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116107f45750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f909501548083161515918501919091529190910416151591015283836108be81615b36565b9450815181106108d0576108d0615acf565b60200260200101819052505b806108e681615b36565b915050610305565b509092915050565b606060008060078460405161090b9190615b51565b90815260200160405180910390205467ffffffffffffffff81111561093257610932615242565b60405190808252806020026020018201604052801561096b57816020015b610958614dd1565b8152602001906001900390816109505790505b5090506000805b60015481101561101857600180828154811061099057610990615acf565b600091825260209091206007601090920201015460ff1660048111156109b8576109b8615003565b1480156109fc575042600182815481106109d4576109d4615acf565b9060005260206000209060100201600a016001600381106109f7576109f7615acf565b015411155b8015610a76575085604051602001610a149190615b51565b6040516020818303038152906040528051906020012060018281548110610a3d57610a3d615acf565b9060005260206000209060100201600201604051602001610a5e9190615b6d565b60405160208183030381529060405280519060200120145b156110065760018181548110610a8e57610a8e615acf565b9060005260206000209060100201604051806101c001604052908160008201548152602001600182018054610ac290615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90615ae5565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b50505050508152602001600282018054610b5490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8090615ae5565b8015610bcd5780601f10610ba257610100808354040283529160200191610bcd565b820191906000526020600020905b815481529060010190602001808311610bb057829003601f168201915b50505050508152602001600382018054610be690615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290615ae5565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b5050505050815260200160048201604051806040016040529081600082018054610c8890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb490615ae5565b8015610d015780601f10610cd657610100808354040283529160200191610d01565b820191906000526020600020905b815481529060010190602001808311610ce457829003601f168201915b505050505081526020016001820154815250508152602001600682018054610d2890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490615ae5565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b5050509183525050600782015460209091019060ff166004811115610dc857610dc8615003565b6004811115610dd957610dd9615003565b8152602001600882018054610ded90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1990615ae5565b8015610e665780601f10610e3b57610100808354040283529160200191610e66565b820191906000526020600020905b815481529060010190602001808311610e4957829003601f168201915b50505050508152602001600982018054610e7f90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90615ae5565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b815481526020019060010190808311610f1e5750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f90950154808316151591850191909152919091041615159101528383610fe881615b36565b945081518110610ffa57610ffa615acf565b60200260200101819052505b8061101081615b36565b915050610972565b509094909350915050565b60006001828154811061103857611038615acf565b600091825260209091206007601090920201015460ff1692915050565b6060600060608315611740576004856040516110719190615b51565b90815260200160405180910390205467ffffffffffffffff81111561109857611098615242565b6040519080825280602002602001820160405280156110d157816020015b6110be614dd1565b8152602001906001900390816110b65790505b50905060005b60015481101561173a5760018082815481106110f5576110f5615acf565b600091825260209091206007601090920201015460ff16600481111561111d5761111d615003565b1480156111985750856040516020016111369190615b51565b604051602081830303815290604052805190602001206001828154811061115f5761115f615acf565b90600052602060002090601002016008016040516020016111809190615b6d565b60405160208183030381529060405280519060200120145b1561172857600181815481106111b0576111b0615acf565b9060005260206000209060100201604051806101c0016040529081600082015481526020016001820180546111e490615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461121090615ae5565b801561125d5780601f106112325761010080835404028352916020019161125d565b820191906000526020600020905b81548152906001019060200180831161124057829003601f168201915b5050505050815260200160028201805461127690615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546112a290615ae5565b80156112ef5780601f106112c4576101008083540402835291602001916112ef565b820191906000526020600020905b8154815290600101906020018083116112d257829003601f168201915b5050505050815260200160038201805461130890615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461133490615ae5565b80156113815780601f1061135657610100808354040283529160200191611381565b820191906000526020600020905b81548152906001019060200180831161136457829003601f168201915b50505050508152602001600482016040518060400160405290816000820180546113aa90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546113d690615ae5565b80156114235780601f106113f857610100808354040283529160200191611423565b820191906000526020600020905b81548152906001019060200180831161140657829003601f168201915b50505050508152602001600182015481525050815260200160068201805461144a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461147690615ae5565b80156114c35780601f10611498576101008083540402835291602001916114c3565b820191906000526020600020905b8154815290600101906020018083116114a657829003601f168201915b5050509183525050600782015460209091019060ff1660048111156114ea576114ea615003565b60048111156114fb576114fb615003565b815260200160088201805461150f90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461153b90615ae5565b80156115885780601f1061155d57610100808354040283529160200191611588565b820191906000526020600020905b81548152906001019060200180831161156b57829003601f168201915b505050505081526020016009820180546115a190615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546115cd90615ae5565b801561161a5780601f106115ef5761010080835404028352916020019161161a565b820191906000526020600020905b8154815290600101906020018083116115fd57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116116405750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f9095015480831615159185019190915291909104161515910152828461170a81615b36565b95508151811061171c5761171c615acf565b60200260200101819052505b8061173281615b36565b9150506110d7565b50611dd6565b6003856040516117509190615b51565b90815260200160405180910390205467ffffffffffffffff81111561177757611777615242565b6040519080825280602002602001820160405280156117b057816020015b61179d614dd1565b8152602001906001900390816117955790505b50905060005b600154811015611dd457856040516020016117d19190615b51565b60405160208183030381529060405280519060200120600182815481106117fa576117fa615acf565b906000526020600020906010020160080160405160200161181b9190615b6d565b604051602081830303815290604052805190602001201415611dc2576001818154811061184a5761184a615acf565b9060005260206000209060100201604051806101c00160405290816000820154815260200160018201805461187e90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa90615ae5565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b5050505050815260200160028201805461191090615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461193c90615ae5565b80156119895780601f1061195e57610100808354040283529160200191611989565b820191906000526020600020905b81548152906001019060200180831161196c57829003601f168201915b505050505081526020016003820180546119a290615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546119ce90615ae5565b8015611a1b5780601f106119f057610100808354040283529160200191611a1b565b820191906000526020600020905b8154815290600101906020018083116119fe57829003601f168201915b5050505050815260200160048201604051806040016040529081600082018054611a4490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7090615ae5565b8015611abd5780601f10611a9257610100808354040283529160200191611abd565b820191906000526020600020905b815481529060010190602001808311611aa057829003601f168201915b505050505081526020016001820154815250508152602001600682018054611ae490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1090615ae5565b8015611b5d5780601f10611b3257610100808354040283529160200191611b5d565b820191906000526020600020905b815481529060010190602001808311611b4057829003601f168201915b5050509183525050600782015460209091019060ff166004811115611b8457611b84615003565b6004811115611b9557611b95615003565b8152602001600882018054611ba990615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd590615ae5565b8015611c225780601f10611bf757610100808354040283529160200191611c22565b820191906000526020600020905b815481529060010190602001808311611c0557829003601f168201915b50505050508152602001600982018054611c3b90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6790615ae5565b8015611cb45780601f10611c8957610100808354040283529160200191611cb4565b820191906000526020600020905b815481529060010190602001808311611c9757829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b815481526020019060010190808311611cda5750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f90950154808316151591850191909152919091041615159101528284611da481615b36565b955081518110611db657611db6615acf565b60200260200101819052505b80611dcc81615b36565b9150506117b6565b505b9150505b92915050565b60606000600883604051611df49190615b51565b90815260200160405180910390205467ffffffffffffffff811115611e1b57611e1b615242565b604051908082528060200260200182016040528015611e5457816020015b611e41614dd1565b815260200190600190039081611e395790505b5090506000805b60015481101561247c5784604051602001611e769190615b51565b6040516020818303038152906040528051906020012060018281548110611e9f57611e9f615acf565b9060005260206000209060100201600401600001604051602001611ec39190615b6d565b60405160208183030381529060405280519060200120141561246a5760018181548110611ef257611ef2615acf565b9060005260206000209060100201604051806101c001604052908160008201548152602001600182018054611f2690615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5290615ae5565b8015611f9f5780601f10611f7457610100808354040283529160200191611f9f565b820191906000526020600020905b815481529060010190602001808311611f8257829003601f168201915b50505050508152602001600282018054611fb890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe490615ae5565b80156120315780601f1061200657610100808354040283529160200191612031565b820191906000526020600020905b81548152906001019060200180831161201457829003601f168201915b5050505050815260200160038201805461204a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461207690615ae5565b80156120c35780601f10612098576101008083540402835291602001916120c3565b820191906000526020600020905b8154815290600101906020018083116120a657829003601f168201915b50505050508152602001600482016040518060400160405290816000820180546120ec90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461211890615ae5565b80156121655780601f1061213a57610100808354040283529160200191612165565b820191906000526020600020905b81548152906001019060200180831161214857829003601f168201915b50505050508152602001600182015481525050815260200160068201805461218c90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546121b890615ae5565b80156122055780601f106121da57610100808354040283529160200191612205565b820191906000526020600020905b8154815290600101906020018083116121e857829003601f168201915b5050509183525050600782015460209091019060ff16600481111561222c5761222c615003565b600481111561223d5761223d615003565b815260200160088201805461225190615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461227d90615ae5565b80156122ca5780601f1061229f576101008083540402835291602001916122ca565b820191906000526020600020905b8154815290600101906020018083116122ad57829003601f168201915b505050505081526020016009820180546122e390615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461230f90615ae5565b801561235c5780601f106123315761010080835404028352916020019161235c565b820191906000526020600020905b81548152906001019060200180831161233f57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116123825750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f9095015480831615159185019190915291909104161515910152838361244c81615b36565b94508151811061245e5761245e615acf565b60200260200101819052505b8061247481615b36565b915050611e5b565b50909392505050565b61248d614dd1565b600182815481106124a0576124a0615acf565b9060005260206000209060100201604051806101c0016040529081600082015481526020016001820180546124d490615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461250090615ae5565b801561254d5780601f106125225761010080835404028352916020019161254d565b820191906000526020600020905b81548152906001019060200180831161253057829003601f168201915b5050505050815260200160028201805461256690615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461259290615ae5565b80156125df5780601f106125b4576101008083540402835291602001916125df565b820191906000526020600020905b8154815290600101906020018083116125c257829003601f168201915b505050505081526020016003820180546125f890615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461262490615ae5565b80156126715780601f1061264657610100808354040283529160200191612671565b820191906000526020600020905b81548152906001019060200180831161265457829003601f168201915b505050505081526020016004820160405180604001604052908160008201805461269a90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546126c690615ae5565b80156127135780601f106126e857610100808354040283529160200191612713565b820191906000526020600020905b8154815290600101906020018083116126f657829003601f168201915b50505050508152602001600182015481525050815260200160068201805461273a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461276690615ae5565b80156127b35780601f10612788576101008083540402835291602001916127b3565b820191906000526020600020905b81548152906001019060200180831161279657829003601f168201915b5050509183525050600782015460209091019060ff1660048111156127da576127da615003565b60048111156127eb576127eb615003565b81526020016008820180546127ff90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461282b90615ae5565b80156128785780601f1061284d57610100808354040283529160200191612878565b820191906000526020600020905b81548152906001019060200180831161285b57829003601f168201915b5050505050815260200160098201805461289190615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546128bd90615ae5565b801561290a5780601f106128df5761010080835404028352916020019161290a565b820191906000526020600020905b8154815290600101906020018083116128ed57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116129305750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f909501548083161515918501919091529190910416151591015292915050565b60606000606083156130da57600685604051612a119190615b51565b90815260200160405180910390205467ffffffffffffffff811115612a3857612a38615242565b604051908082528060200260200182016040528015612a7157816020015b612a5e614dd1565b815260200190600190039081612a565790505b50905060005b60015481101561173a576001808281548110612a9557612a95615acf565b600091825260209091206007601090920201015460ff166004811115612abd57612abd615003565b148015612b38575085604051602001612ad69190615b51565b6040516020818303038152906040528051906020012060018281548110612aff57612aff615acf565b9060005260206000209060100201600901604051602001612b209190615b6d565b60405160208183030381529060405280519060200120145b156130c85760018181548110612b5057612b50615acf565b9060005260206000209060100201604051806101c001604052908160008201548152602001600182018054612b8490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb090615ae5565b8015612bfd5780601f10612bd257610100808354040283529160200191612bfd565b820191906000526020600020905b815481529060010190602001808311612be057829003601f168201915b50505050508152602001600282018054612c1690615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612c4290615ae5565b8015612c8f5780601f10612c6457610100808354040283529160200191612c8f565b820191906000526020600020905b815481529060010190602001808311612c7257829003601f168201915b50505050508152602001600382018054612ca890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd490615ae5565b8015612d215780601f10612cf657610100808354040283529160200191612d21565b820191906000526020600020905b815481529060010190602001808311612d0457829003601f168201915b5050505050815260200160048201604051806040016040529081600082018054612d4a90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612d7690615ae5565b8015612dc35780601f10612d9857610100808354040283529160200191612dc3565b820191906000526020600020905b815481529060010190602001808311612da657829003601f168201915b505050505081526020016001820154815250508152602001600682018054612dea90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612e1690615ae5565b8015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b5050509183525050600782015460209091019060ff166004811115612e8a57612e8a615003565b6004811115612e9b57612e9b615003565b8152602001600882018054612eaf90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612edb90615ae5565b8015612f285780601f10612efd57610100808354040283529160200191612f28565b820191906000526020600020905b815481529060010190602001808311612f0b57829003601f168201915b50505050508152602001600982018054612f4190615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612f6d90615ae5565b8015612fba5780601f10612f8f57610100808354040283529160200191612fba565b820191906000526020600020905b815481529060010190602001808311612f9d57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b815481526020019060010190808311612fe05750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f909501548083161515918501919091529190910416151591015282846130aa81615b36565b9550815181106130bc576130bc615acf565b60200260200101819052505b806130d281615b36565b915050612a77565b6005856040516130ea9190615b51565b90815260200160405180910390205467ffffffffffffffff81111561311157613111615242565b60405190808252806020026020018201604052801561314a57816020015b613137614dd1565b81526020019060019003908161312f5790505b50905060005b600154811015611dd4578560405160200161316b9190615b51565b604051602081830303815290604052805190602001206001828154811061319457613194615acf565b90600052602060002090601002016009016040516020016131b59190615b6d565b60405160208183030381529060405280519060200120141561375c57600181815481106131e4576131e4615acf565b9060005260206000209060100201604051806101c00160405290816000820154815260200160018201805461321890615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461324490615ae5565b80156132915780601f1061326657610100808354040283529160200191613291565b820191906000526020600020905b81548152906001019060200180831161327457829003601f168201915b505050505081526020016002820180546132aa90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546132d690615ae5565b80156133235780601f106132f857610100808354040283529160200191613323565b820191906000526020600020905b81548152906001019060200180831161330657829003601f168201915b5050505050815260200160038201805461333c90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461336890615ae5565b80156133b55780601f1061338a576101008083540402835291602001916133b5565b820191906000526020600020905b81548152906001019060200180831161339857829003601f168201915b50505050508152602001600482016040518060400160405290816000820180546133de90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461340a90615ae5565b80156134575780601f1061342c57610100808354040283529160200191613457565b820191906000526020600020905b81548152906001019060200180831161343a57829003601f168201915b50505050508152602001600182015481525050815260200160068201805461347e90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546134aa90615ae5565b80156134f75780601f106134cc576101008083540402835291602001916134f7565b820191906000526020600020905b8154815290600101906020018083116134da57829003601f168201915b5050509183525050600782015460209091019060ff16600481111561351e5761351e615003565b600481111561352f5761352f615003565b815260200160088201805461354390615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461356f90615ae5565b80156135bc5780601f10613591576101008083540402835291602001916135bc565b820191906000526020600020905b81548152906001019060200180831161359f57829003601f168201915b505050505081526020016009820180546135d590615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461360190615ae5565b801561364e5780601f106136235761010080835404028352916020019161364e565b820191906000526020600020905b81548152906001019060200180831161363157829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116136745750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f9095015480831615159185019190915291909104161515910152828461373e81615b36565b95508151811061375057613750615acf565b60200260200101819052505b8061376681615b36565b915050613150565b60005460405163179dea8360e31b8152600481018390526060916001600160a01b03169063bcef54189060240160006040518083038186803b1580156137b357600080fd5b505afa1580156137c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dda9190810190615bdf565b426001828154811061380357613803615acf565b9060005260206000209060100201600a0160026003811061382657613826615acf565b015411613a4d57600180828154811061384157613841615acf565b600091825260209091206007601090920201015460ff16600481111561386957613869615003565b1415613984576002805490600061387f83615ccc565b919050555060046001828154811061389957613899615acf565b90600052602060002090601002016008016040516138b79190615b6d565b90815260405190819003602001902080549060006138d483615ccc565b91905055506006600182815481106138ee576138ee615acf565b906000526020600020906010020160090160405161390c9190615b6d565b908152604051908190036020019020805490600061392983615ccc565b919050555060076001828154811061394357613943615acf565b90600052602060002090601002016002016040516139619190615b6d565b908152604051908190036020019020805490600061397e83615ccc565b91905055505b60046001828154811061399957613999615acf565b60009182526020909120600760109092020101805460ff191660018360048111156139c6576139c6615003565b02179055507f8fdec0edc19a1eb9147642be05b326b7f5d42bf96f5ba734530bfca33bc8d7e9600182815481106139ff576139ff615acf565b906000526020600020906010020160080160018381548110613a2357613a23615acf565b906000526020600020906010020160090183604051613a4493929190615d5a565b60405180910390a15b50565b600060018c81548110613a6557613a65615acf565b9060005260206000209060100201905086604051602001613a869190615b51565b6040516020818303038152906040528051906020012060018d81548110613aaf57613aaf615acf565b9060005260206000209060100201600801604051602001613ad09190615b6d565b6040516020818303038152906040528051906020012014613b425760405162461bcd60e51b815260206004820152602160248201527f4e6f74207468652070726f7669646572206f66207468652061677265656d656e6044820152601d60fa1b60648201526084015b60405180910390fd5b6001600782015460ff166004811115613b5d57613b5d615003565b1415613ec6578751613b7890600683019060208b0190614e9a565b5084600081518110613b8c57613b8c615acf565b602002602001015181600a01600160038110613baa57613baa615acf565b0155600a81016000015485600081518110613bc757613bc7615acf565b60200260200101511015613c2d5760405162461bcd60e51b815260206004820152602760248201527f53746172742064617465206d757374206265206166746572206372656174696f60448201526637103230ba329760c91b6064820152608401613b39565b84600081518110613c4057613c40615acf565b602002602001015185600181518110613c5b57613c5b615acf565b602002602001015111613cbb5760405162461bcd60e51b815260206004820152602260248201527f456e642064617465206d75737420626520616674657220737461727420646174604482015261329760f11b6064820152608401613b39565b84600181518110613cce57613cce615acf565b602002602001015181600a01600260038110613cec57613cec615acf565b01558351600d820180546020808801516040808a015161ffff1994851696151561ff00199081169790971761010093151584021762ff00001916620100009115158202179095558851600e88018054948b0151928b015160608c015195909616911515909716179015159091021763ffff0000191691151590920263ff000000191617630100000091151591909102179055600f8101805460ff1990811684151517909155600782018054600292166001830217905550600060018d81548110613db857613db8615acf565b600091825260208220600f6010909202010180549215156101000261ff0019909316929092179091556002805491613def83615ccc565b9190505550600487604051613e049190615b51565b9081526040519081900360200190208054906000613e2183615ccc565b9190505550600686604051613e369190615b51565b9081526040519081900360200190208054906000613e5383615ccc565b919050555060078a604051613e689190615b51565b9081526040519081900360200190208054906000613e8583615ccc565b91905055507fe45a4efc7be91ee38226641b8dfb0a53e062696831d4052b7b79903b7d39301187878e604051613ebd93929190615d90565b60405180910390a15b505050505050505050505050565b80604051602001613ee59190615b51565b6040516020818303038152906040528051906020012060018381548110613f0e57613f0e615acf565b9060005260206000209060100201600901604051602001613f2f9190615b6d565b6040516020818303038152906040528051906020012014613f925760405162461bcd60e51b815260206004820152601e60248201527f4e6f742074686520636f6e73756d6572206f662061677265656d656e742e00006044820152606401613b39565b6001808381548110613fa657613fa6615acf565b9060005260206000209060100201600f0160016101000a81548160ff0219169083151502179055504260018381548110613fe257613fe2615acf565b9060005260206000209060100201600a0160026003811061400557614005615acf565b0154106141a257600180838154811061402057614020615acf565b60009182526020909120600760109092020101805460ff1916600183600481111561404d5761404d615003565b02179055506002805490600061406283615b36565b919050555060046001838154811061407c5761407c615acf565b906000526020600020906010020160080160405161409a9190615b6d565b90815260405190819003602001902080549060006140b783615b36565b91905055506006816040516140cc9190615b51565b90815260405190819003602001902080549060006140e983615b36565b919050555060076001838154811061410357614103615acf565b90600052602060002090601002016002016040516141219190615b6d565b908152604051908190036020019020805490600061413e83615b36565b91905055507faf3cbb721f27933bb22b42ea3324fba0c7cf12a6fc685cbf705ba7674aaad1b26001838154811061417757614177615acf565b9060005260206000209060100201600801828460405161419993929190615db5565b60405180910390a15b5050565b6141ae614dd1565b60208181018d9052604082018c9052606082018b90528951608083018051919091528a82015190519091015260a0810188905260e081018790526101008101869052600060c08201819052855186919061420a5761420a615acf565b602002602001015181610120015160006003811061422a5761422a615acf565b602002015284518590600190811061424457614244615acf565b602002602001015181610120015160016003811061426457614264615acf565b60200201526101208101515185518690600190811061428557614285615acf565b602002602001015110156142eb5760405162461bcd60e51b815260206004820152602760248201527f53746172742064617465206d757374206265206166746572206372656174696f60448201526637103230ba329760c91b6064820152608401613b39565b846001815181106142fe576142fe615acf565b60200260200101518560028151811061431957614319615acf565b6020026020010151116143795760405162461bcd60e51b815260206004820152602260248201527f456e642064617465206d75737420626520616674657220737461727420646174604482015261329760f11b6064820152608401613b39565b8460028151811061438c5761438c615acf565b60200260200101518161012001516002600381106143ac576143ac615acf565b6020908102919091019190915284516101408301805191151590915285820151815190151590830152604080870151915191151591810191909152845161016084018051911515909152858301518151901515908401528582015181519015159201919091526060808601519151911515910152821515610180830152600180548084528082018255600091909152825160109091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101918255838301518051859461449e937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf701920190614e9a565b50604082015180516144ba916002840191602090910190614e9a565b50606082015180516144d6916003840191602090910190614e9a565b5060808201518051805160048401916144f491839160200190614e9a565b5060209182015160019091015560a083015180516145189260068501920190614e9a565b5060c082015160078201805460ff1916600183600481111561453c5761453c615003565b021790555060e0820151805161455c916008840191602090910190614e9a565b506101008201518051614579916009840191602090910190614e9a565b5061012082015161459090600a8301906003614f1e565b506101408201518051600d8301805460208085015160409586015161ffff1993841695151561ff00199081169690961761010092151583021762ff00001916620100009115158202179094556101608801518051600e8901805494830151838a015160609094015195871692151589169290921791151584029190911763ffff0000191691151590950263ff00000019161763010000009215159290920291909117909255610180860151600f90950180546101a090970151969091169415159092169390931793151590920292909217905551600390614672908990615b51565b908152604051908190036020019020805490600061468f83615b36565b91905055506005866040516146a49190615b51565b90815260405190819003602001902080549060006146c183615b36565b909155505088516040516008916146d791615b51565b90815260405190819003602001902080549060006146f483615b36565b9091555050600180547f6435418332f1be3deea10416eedb87e64daa2a2b4a284b051f39244cc3a0dfa6918991899161472c91615dc8565b604051613ebd93929190615d90565b6001818154811061474b57600080fd5b6000918252602090912060109091020180546001820180549193509061477090615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461479c90615ae5565b80156147e95780601f106147be576101008083540402835291602001916147e9565b820191906000526020600020905b8154815290600101906020018083116147cc57829003601f168201915b5050505050908060020180546147fe90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461482a90615ae5565b80156148775780601f1061484c57610100808354040283529160200191614877565b820191906000526020600020905b81548152906001019060200180831161485a57829003601f168201915b50505050509080600301805461488c90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546148b890615ae5565b80156149055780601f106148da57610100808354040283529160200191614905565b820191906000526020600020905b8154815290600101906020018083116148e857829003601f168201915b5050505050908060040160405180604001604052908160008201805461492a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461495690615ae5565b80156149a35780601f10614978576101008083540402835291602001916149a3565b820191906000526020600020905b81548152906001019060200180831161498657829003601f168201915b50505050508152602001600182015481525050908060060180546149c690615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546149f290615ae5565b8015614a3f5780601f10614a1457610100808354040283529160200191614a3f565b820191906000526020600020905b815481529060010190602001808311614a2257829003601f168201915b5050506007840154600885018054949560ff909216949193509150614a6390615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054614a8f90615ae5565b8015614adc5780601f10614ab157610100808354040283529160200191614adc565b820191906000526020600020905b815481529060010190602001808311614abf57829003601f168201915b505050505090806009018054614af190615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054614b1d90615ae5565b8015614b6a5780601f10614b3f57610100808354040283529160200191614b6a565b820191906000526020600020905b815481529060010190602001808311614b4d57829003601f168201915b50506040805160608082018352600d88015460ff8082161515845261010080830482161515602080870191909152620100009384900483161515868801528651608081018852600e8d0154808516151582528381048516151592820192909252938104831615159684019690965263010000009095048116151592820192909252600f909801549697919691955081811694509190041690508d565b600054604051630222803b60e61b81526001600160a01b03909116906388a00ec090614c44908b908b908b908b908b908b908b908b90600401615ddf565b600060405180830381600087803b158015614c5e57600080fd5b505af1158015614c72573d6000803e3d6000fd5b50506000805460405163179dea8360e31b8152600481018d90529193506001600160a01b0316915063bcef54189060240160006040518083038186803b158015614cbb57600080fd5b505afa158015614ccf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614cf79190810190615bdf565b511115614d4657600360018981548110614d1357614d13615acf565b60009182526020909120600760109092020101805460ff19166001836004811115614d4057614d40615003565b02179055505b7fac46f93b782753aa8893b24ed8cc9e12cdf5a8f392d332bb85a012b8aab4eab760018981548110614d7a57614d7a615acf565b906000526020600020906010020160080160018a81548110614d9e57614d9e615acf565b90600052602060002090601002016009018a604051614dbf93929190615d5a565b60405180910390a15050505050505050565b604051806101c0016040528060008152602001606081526020016060815260200160608152602001614e16604051806040016040528060608152602001600081525090565b815260606020820152604001600081526020016060815260200160608152602001614e3f614f4b565b8152604080516060810182526000808252602082810182905292820152910190815260408051608081018252600080825260208281018290529282018190526060820152910190815260006020820181905260409091015290565b828054614ea690615ae5565b90600052602060002090601f016020900481019282614ec85760008555614f0e565b82601f10614ee157805160ff1916838001178555614f0e565b82800160010185558215614f0e579182015b82811115614f0e578251825591602001919060010190614ef3565b50614f1a929150614f69565b5090565b8260038101928215614f0e5791602002820182811115614f0e578251825591602001919060010190614ef3565b60405180606001604052806003906020820280368337509192915050565b5b80821115614f1a5760008155600101614f6a565b60005b83811015614f99578181015183820152602001614f81565b83811115614fa8576000848401525b50505050565b60008151808452614fc6816020860160208601614f7e565b601f01601f19169290920160200192915050565b6000815160408452614fef6040850182614fae565b602093840151949093019390935250919050565b634e487b7160e01b600052602160045260246000fd5b6005811061503757634e487b7160e01b600052602160045260246000fd5b9052565b8060005b6003811015614fa857815184526020938401939091019060010161503f565b60006102a082518452602083015181602086015261507e82860182614fae565b915050604083015184820360408601526150988282614fae565b915050606083015184820360608601526150b28282614fae565b915050608083015184820360808601526150cc8282614fda565b91505060a083015184820360a08601526150e68282614fae565b91505060c08301516150fb60c0860182615019565b5060e083015184820360e08601526151138282614fae565b915050610100808401518583038287015261512e8382614fae565b92505050610120808401516151458287018261503b565b5050610140830151610180615176818701838051151582526020808201511515908301526040908101511515910152565b610160850151805115156101e088015260208101511515610200880152604081015115156102208801526060015115156102408701528401511515610260860152506101a090920151151561028090930192909252919050565b600082825180855260208086019550808260051b84010181860160005b8481101561521b57601f1986840301895261520983835161505e565b988401989250908301906001016151ed565b5090979650505050505050565b60208152600061523b60208301846151d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561528157615281615242565b604052919050565b600067ffffffffffffffff8211156152a3576152a3615242565b50601f01601f191660200190565b600082601f8301126152c257600080fd5b81356152d56152d082615289565b615258565b8181528460208386010111156152ea57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561531957600080fd5b813567ffffffffffffffff81111561533057600080fd5b61533c848285016152b1565b949350505050565b60408152600061535760408301856151d0565b90508260208301529392505050565b60006020828403121561537857600080fd5b5035919050565b60208101611dda8284615019565b8035801515811461539d57600080fd5b919050565b600080604083850312156153b557600080fd5b823567ffffffffffffffff8111156153cc57600080fd5b6153d8858286016152b1565b9250506153e76020840161538d565b90509250929050565b60208152600061523b602083018461505e565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561545857603f19888603018452615446858351614fae565b9450928501929085019060010161542a565b5092979650505050505050565b600067ffffffffffffffff82111561547f5761547f615242565b5060051b60200190565b600082601f83011261549a57600080fd5b813560206154aa6152d083615465565b82815260059290921b840181019181810190868411156154c957600080fd5b8286015b848110156154e457803583529183019183016154cd565b509695505050505050565b60006060828403121561550157600080fd5b6040516060810181811067ffffffffffffffff8211171561552457615524615242565b6040529050806155338361538d565b81526155416020840161538d565b60208201526155526040840161538d565b60408201525092915050565b60006080828403121561557057600080fd5b6040516080810181811067ffffffffffffffff8211171561559357615593615242565b6040529050806155a28361538d565b81526155b06020840161538d565b60208201526155c16040840161538d565b60408201526155d26060840161538d565b60608201525092915050565b60008060008060008060008060008060006102008c8e03121561560057600080fd5b8b359a5067ffffffffffffffff8060208e0135111561561e57600080fd5b61562e8e60208f01358f016152b1565b9a508060408e0135111561564157600080fd5b6156518e60408f01358f016152b1565b99508060608e0135111561566457600080fd5b6156748e60608f01358f016152b1565b98508060808e0135111561568757600080fd5b6156978e60808f01358f016152b1565b97508060a08e013511156156aa57600080fd5b6156ba8e60a08f01358f016152b1565b96508060c08e013511156156cd57600080fd5b6156dd8e60c08f01358f016152b1565b95508060e08e013511156156f057600080fd5b506157018d60e08e01358e01615489565b93506157118d6101008e016154ef565b92506157218d6101608e0161555e565b91506157306101e08d0161538d565b90509295989b509295989b9093969950565b6000806040838503121561575557600080fd5b82359150602083013567ffffffffffffffff81111561577357600080fd5b61577f858286016152b1565b9150509250929050565b60006040828403121561579b57600080fd5b6040516040810167ffffffffffffffff82821081831117156157bf576157bf615242565b8160405282935084359150808211156157d757600080fd5b506157e4858286016152b1565b825250602083013560208201525092915050565b60008060008060008060008060008060006102008c8e03121561581a57600080fd5b67ffffffffffffffff808d35111561583157600080fd5b61583e8e8e358f016152b1565b9b508060208e0135111561585157600080fd5b6158618e60208f01358f016152b1565b9a508060408e0135111561587457600080fd5b6158848e60408f01358f016152b1565b99508060608e0135111561589757600080fd5b6156748e60608f01358f01615789565b8d8152610240602082015260006158c261024083018f614fae565b82810360408401526158d4818f614fae565b905082810360608401526158e8818e614fae565b905082810360808401526158fc818d614fda565b905082810360a0840152615910818c614fae565b905061591f60c084018b615019565b82810360e0840152615931818a614fae565b90508281036101008401526159468189614fae565b87511515610120850152602088015115156101408501526040880151151561016085015291506159739050565b84511515610180830152602085015115156101a0830152604085015115156101c083015260609094015115156101e08201529115156102008301521515610220909101529a9950505050505050505050565b600080600080600080600080610100898b0312156159e257600080fd5b88359750602089013567ffffffffffffffff80821115615a0157600080fd5b615a0d8c838d016152b1565b985060408b0135915080821115615a2357600080fd5b615a2f8c838d016152b1565b975060608b0135915080821115615a4557600080fd5b615a518c838d016152b1565b965060808b0135915080821115615a6757600080fd5b615a738c838d016152b1565b955060a08b0135945060c08b0135915080821115615a9057600080fd5b615a9c8c838d016152b1565b935060e08b0135915080821115615ab257600080fd5b50615abf8b828c016152b1565b9150509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680615af957607f821691505b60208210811415615b1a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415615b4a57615b4a615b20565b5060010190565b60008251615b63818460208701614f7e565b9190910192915050565b6000808354615b7b81615ae5565b60018281168015615b935760018114615ba457615bd3565b60ff19841687528287019450615bd3565b8760005260208060002060005b85811015615bca5781548a820152908401908201615bb1565b50505082870194505b50929695505050505050565b60006020808385031215615bf257600080fd5b825167ffffffffffffffff80821115615c0a57600080fd5b818501915085601f830112615c1e57600080fd5b8151615c2c6152d082615465565b81815260059190911b83018401908481019088831115615c4b57600080fd5b8585015b83811015615cbf57805185811115615c675760008081fd5b8601603f81018b13615c795760008081fd5b878101516040615c8b6152d083615289565b8281528d82848601011115615ca05760008081fd5b615caf838c8301848701614f7e565b8652505050918601918601615c4f565b5098975050505050505050565b600081615cdb57615cdb615b20565b506000190190565b60008154615cf081615ae5565b808552602060018381168015615d0d5760018114615d2157615d4f565b60ff19851688840152604088019550615d4f565b866000528260002060005b85811015615d475781548a8201860152908301908401615d2c565b890184019650505b505050505092915050565b606081526000615d6d6060830186615ce3565b8281036020840152615d7f8186615ce3565b915050826040830152949350505050565b606081526000615da36060830186614fae565b8281036020840152615d7f8186614fae565b606081526000615da36060830186615ce3565b600082821015615dda57615dda615b20565b500390565b60006101008a8352806020840152615df98184018b614fae565b90508281036040840152615e0d818a614fae565b90508281036060840152615e218189614fae565b90508281036080840152615e358188614fae565b90508560a084015282810360c0840152615e4f8186614fae565b905082810360e0840152615e638185614fae565b9b9a505050505050505050505056fea26469706673582212208678f0a46c965017a0c6bb8ddebb5a34aae707eaeb85b2c3fad68490da28ca7e64736f6c63430008090033608060405234801561001057600080fd5b50610df7806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806388a00ec01161005b57806388a00ec0146100de57806396e59682146100f3578063b995bb9514610106578063bcef54181461012757600080fd5b80630db459e4146100825780634c5765d1146100ab5780636352a8a6146100cb575b600080fd5b610095610090366004610a1e565b610147565b6040516100a29190610a9c565b60405180910390f35b6100be6100b9366004610ab6565b610200565b6040516100a29190610b07565b6100956100d9366004610ab6565b6102f3565b6100f16100ec366004610bde565b61030c565b005b610095610101366004610ab6565b610560565b610119610114366004610ab6565b610602565b6040516100a2929190610ce8565b61013a610135366004610ab6565b6106ab565b6040516100a29190610d08565b6002602052816000526040600020818154811061016357600080fd5b9060005260206000200160009150915050805461017f90610d6a565b80601f01602080910402602001604051908101604052809291908181526020018280546101ab90610d6a565b80156101f85780601f106101cd576101008083540402835291602001916101f8565b820191906000526020600020905b8154815290600101906020018083116101db57829003601f168201915b505050505081565b6040805180820190915260008152606060208201526000828152602081905260409081902081518083019092528054829060ff16600481111561024557610245610acf565b600481111561025657610256610acf565b815260200160018201805461026a90610d6a565b80601f016020809104026020016040519081016040528092919081815260200182805461029690610d6a565b80156102e35780601f106102b8576101008083540402835291602001916102e3565b820191906000526020600020905b8154815290600101906020018083116102c657829003601f168201915b5050505050815250509050919050565b6001602052600090815260409020805461017f90610d6a565b61034c6040518060e00160405280606081526020016060815260200160608152602001606081526020016000815260200160608152602001606081525090565b87815260208082018890526040808301889052606083018790526080830186905260a0830185905260c083018490525161039691016818dbdb5c1b195d195960ba1b815260090190565b6040516020818303038152906040528051906020012081604001516040516020016103c19190610da5565b6040516020818303038152906040528051906020012014156103f95760008981526002602052604081206103f49161090d565b610555565b6040516b1b9bdd10dbdb5c1b195d195960a21b6020820152602c0160405160208183030381529060405280519060200120816040015160405160200161043f9190610da5565b6040516020818303038152906040528051906020012014156104745761046b8960028360c00151610797565b6103f48961080e565b604051671858d8d95c1d195960c21b60208201526028016040516020818303038152906040528051906020012081604001516040516020016104b69190610da5565b6040516020818303038152906040528051906020012014156104e25761046b8960028360c00151610797565b6040516519195b9a595960d21b60208201526026016040516020818303038152906040528051906020012081604001516040516020016105229190610da5565b6040516020818303038152906040528051906020012014156105555760008981526002602052604081206105559161090d565b505050505050505050565b600081815260016020526040902080546060919061057d90610d6a565b80601f01602080910402602001604051908101604052809291908181526020018280546105a990610d6a565b80156105f65780601f106105cb576101008083540402835291602001916105f6565b820191906000526020600020905b8154815290600101906020018083116105d957829003601f168201915b50505050509050919050565b6000602081905290815260409020805460018201805460ff909216929161062890610d6a565b80601f016020809104026020016040519081016040528092919081815260200182805461065490610d6a565b80156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050505050905082565b606060026000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561078c5783829060005260206000200180546106ff90610d6a565b80601f016020809104026020016040519081016040528092919081815260200182805461072b90610d6a565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b5050505050815260200190600101906106e0565b505050509050919050565b60405180604001604052808360048111156107b4576107b4610acf565b815260209081018390526000858152908190526040902081518154829060ff191660018360048111156107e9576107e9610acf565b02179055506020828101518051610806926001850192019061092e565b505050505050565b600081815260026020908152604080832080546001810182559084529282902081518083019092526009808352685465726d696e61746560b81b9290930191825261085a93019161092e565b5060008181526002602090815260408083208054600181018255908452928290208151808301909252600a808352694e6577456e644461746560b01b929093019182526108a893019161092e565b5060008181526002602090815260408083208054600181018255908452928290208151808301909252601f8083527f4e6577456e6444617465416e64526564756374696f6e4f665061796d656e74009290930191825261090993019161092e565b5050565b508054600082559060005260206000209081019061092b91906109b2565b50565b82805461093a90610d6a565b90600052602060002090601f01602090048101928261095c57600085556109a2565b82601f1061097557805160ff19168380011785556109a2565b828001600101855582156109a2579182015b828111156109a2578251825591602001919060010190610987565b506109ae9291506109cf565b5090565b808211156109ae5760006109c682826109e4565b506001016109b2565b5b808211156109ae57600081556001016109d0565b5080546109f090610d6a565b6000825580601f10610a00575050565b601f01602090049060005260206000209081019061092b91906109cf565b60008060408385031215610a3157600080fd5b50508035926020909101359150565b60005b83811015610a5b578181015183820152602001610a43565b83811115610a6a576000848401525b50505050565b60008151808452610a88816020860160208601610a40565b601f01601f19169290920160200192915050565b602081526000610aaf6020830184610a70565b9392505050565b600060208284031215610ac857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60058110610b0357634e487b7160e01b600052602160045260246000fd5b9052565b60208152610b19602082018351610ae5565b60006020830151604080840152610b336060840182610a70565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b6257600080fd5b813567ffffffffffffffff80821115610b7d57610b7d610b3b565b604051601f8301601f19908116603f01168101908282118183101715610ba557610ba5610b3b565b81604052838152866020858801011115610bbe57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600080610100898b031215610bfb57600080fd5b88359750602089013567ffffffffffffffff80821115610c1a57600080fd5b610c268c838d01610b51565b985060408b0135915080821115610c3c57600080fd5b610c488c838d01610b51565b975060608b0135915080821115610c5e57600080fd5b610c6a8c838d01610b51565b965060808b0135915080821115610c8057600080fd5b610c8c8c838d01610b51565b955060a08b0135945060c08b0135915080821115610ca957600080fd5b610cb58c838d01610b51565b935060e08b0135915080821115610ccb57600080fd5b50610cd88b828c01610b51565b9150509295985092959890939650565b610cf28184610ae5565b604060208201526000610b336040830184610a70565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d5d57603f19888603018452610d4b858351610a70565b94509285019290850190600101610d2f565b5092979650505050505050565b600181811c90821680610d7e57607f821691505b60208210811415610d9f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610db7818460208701610a40565b919091019291505056fea2646970667358221220f2d927d8d6d26102789cb50d55dfdb939b3ec540ae9ea9d3b81eab3ebf58bed464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806365fa865f11610097578063a630518911610066578063a630518914610241578063ad9099a214610254578063bd14de9614610267578063dd4be34b1461029357600080fd5b806365fa865f146101e657806383a2fc1c146101f95780639a02692414610219578063a473ecb31461022e57600080fd5b8063464da40d116100d3578063464da40d14610175578063482e2203146101a05780634dffbf0d146101b35780634f9f6fe6146101c657600080fd5b8063063bd15a146101055780631c510ea91461012357806330937f3a1461013457806344c9af2814610155575b600080fd5b61010d6102a6565b60405161011a9190615228565b60405180910390f35b60015460405190815260200161011a565b610147610142366004615307565b6108f6565b60405161011a929190615344565b610168610163366004615366565b611023565b60405161011a919061537f565b600054610188906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d6101ae3660046153a2565b611055565b61010d6101c1366004615307565b611de0565b6101d96101d4366004615366565b612485565b60405161011a91906153f0565b61010d6101f43660046153a2565b6129f5565b61020c610207366004615366565b61376e565b60405161011a9190615403565b61022c610227366004615366565b6137ef565b005b61022c61023c3660046155de565b613a50565b61022c61024f366004615742565b613ed4565b61022c6102623660046157f8565b6141a6565b61027a610275366004615366565b61473b565b60405161011a9d9c9b9a999897969594939291906158a7565b61022c6102a13660046159c5565b614c06565b6060600060025467ffffffffffffffff8111156102c5576102c5615242565b6040519080825280602002602001820160405280156102fe57816020015b6102eb614dd1565b8152602001906001900390816102e35790505b5090506000805b6001548110156108ee57600180828154811061032357610323615acf565b600091825260209091206007601090920201015460ff16600481111561034b5761034b615003565b14156108dc576001818154811061036457610364615acf565b9060005260206000209060100201604051806101c00160405290816000820154815260200160018201805461039890615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546103c490615ae5565b80156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b5050505050815260200160028201805461042a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461045690615ae5565b80156104a35780601f10610478576101008083540402835291602001916104a3565b820191906000526020600020905b81548152906001019060200180831161048657829003601f168201915b505050505081526020016003820180546104bc90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546104e890615ae5565b80156105355780601f1061050a57610100808354040283529160200191610535565b820191906000526020600020905b81548152906001019060200180831161051857829003601f168201915b505050505081526020016004820160405180604001604052908160008201805461055e90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90615ae5565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b5050505050815260200160018201548152505081526020016006820180546105fe90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461062a90615ae5565b80156106775780601f1061064c57610100808354040283529160200191610677565b820191906000526020600020905b81548152906001019060200180831161065a57829003601f168201915b5050509183525050600782015460209091019060ff16600481111561069e5761069e615003565b60048111156106af576106af615003565b81526020016008820180546106c390615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546106ef90615ae5565b801561073c5780601f106107115761010080835404028352916020019161073c565b820191906000526020600020905b81548152906001019060200180831161071f57829003601f168201915b5050505050815260200160098201805461075590615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461078190615ae5565b80156107ce5780601f106107a3576101008083540402835291602001916107ce565b820191906000526020600020905b8154815290600101906020018083116107b157829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116107f45750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f909501548083161515918501919091529190910416151591015283836108be81615b36565b9450815181106108d0576108d0615acf565b60200260200101819052505b806108e681615b36565b915050610305565b509092915050565b606060008060078460405161090b9190615b51565b90815260200160405180910390205467ffffffffffffffff81111561093257610932615242565b60405190808252806020026020018201604052801561096b57816020015b610958614dd1565b8152602001906001900390816109505790505b5090506000805b60015481101561101857600180828154811061099057610990615acf565b600091825260209091206007601090920201015460ff1660048111156109b8576109b8615003565b1480156109fc575042600182815481106109d4576109d4615acf565b9060005260206000209060100201600a016001600381106109f7576109f7615acf565b015411155b8015610a76575085604051602001610a149190615b51565b6040516020818303038152906040528051906020012060018281548110610a3d57610a3d615acf565b9060005260206000209060100201600201604051602001610a5e9190615b6d565b60405160208183030381529060405280519060200120145b156110065760018181548110610a8e57610a8e615acf565b9060005260206000209060100201604051806101c001604052908160008201548152602001600182018054610ac290615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90615ae5565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b50505050508152602001600282018054610b5490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8090615ae5565b8015610bcd5780601f10610ba257610100808354040283529160200191610bcd565b820191906000526020600020905b815481529060010190602001808311610bb057829003601f168201915b50505050508152602001600382018054610be690615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290615ae5565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b5050505050815260200160048201604051806040016040529081600082018054610c8890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb490615ae5565b8015610d015780601f10610cd657610100808354040283529160200191610d01565b820191906000526020600020905b815481529060010190602001808311610ce457829003601f168201915b505050505081526020016001820154815250508152602001600682018054610d2890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490615ae5565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b5050509183525050600782015460209091019060ff166004811115610dc857610dc8615003565b6004811115610dd957610dd9615003565b8152602001600882018054610ded90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1990615ae5565b8015610e665780601f10610e3b57610100808354040283529160200191610e66565b820191906000526020600020905b815481529060010190602001808311610e4957829003601f168201915b50505050508152602001600982018054610e7f90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90615ae5565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b815481526020019060010190808311610f1e5750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f90950154808316151591850191909152919091041615159101528383610fe881615b36565b945081518110610ffa57610ffa615acf565b60200260200101819052505b8061101081615b36565b915050610972565b509094909350915050565b60006001828154811061103857611038615acf565b600091825260209091206007601090920201015460ff1692915050565b6060600060608315611740576004856040516110719190615b51565b90815260200160405180910390205467ffffffffffffffff81111561109857611098615242565b6040519080825280602002602001820160405280156110d157816020015b6110be614dd1565b8152602001906001900390816110b65790505b50905060005b60015481101561173a5760018082815481106110f5576110f5615acf565b600091825260209091206007601090920201015460ff16600481111561111d5761111d615003565b1480156111985750856040516020016111369190615b51565b604051602081830303815290604052805190602001206001828154811061115f5761115f615acf565b90600052602060002090601002016008016040516020016111809190615b6d565b60405160208183030381529060405280519060200120145b1561172857600181815481106111b0576111b0615acf565b9060005260206000209060100201604051806101c0016040529081600082015481526020016001820180546111e490615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461121090615ae5565b801561125d5780601f106112325761010080835404028352916020019161125d565b820191906000526020600020905b81548152906001019060200180831161124057829003601f168201915b5050505050815260200160028201805461127690615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546112a290615ae5565b80156112ef5780601f106112c4576101008083540402835291602001916112ef565b820191906000526020600020905b8154815290600101906020018083116112d257829003601f168201915b5050505050815260200160038201805461130890615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461133490615ae5565b80156113815780601f1061135657610100808354040283529160200191611381565b820191906000526020600020905b81548152906001019060200180831161136457829003601f168201915b50505050508152602001600482016040518060400160405290816000820180546113aa90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546113d690615ae5565b80156114235780601f106113f857610100808354040283529160200191611423565b820191906000526020600020905b81548152906001019060200180831161140657829003601f168201915b50505050508152602001600182015481525050815260200160068201805461144a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461147690615ae5565b80156114c35780601f10611498576101008083540402835291602001916114c3565b820191906000526020600020905b8154815290600101906020018083116114a657829003601f168201915b5050509183525050600782015460209091019060ff1660048111156114ea576114ea615003565b60048111156114fb576114fb615003565b815260200160088201805461150f90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461153b90615ae5565b80156115885780601f1061155d57610100808354040283529160200191611588565b820191906000526020600020905b81548152906001019060200180831161156b57829003601f168201915b505050505081526020016009820180546115a190615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546115cd90615ae5565b801561161a5780601f106115ef5761010080835404028352916020019161161a565b820191906000526020600020905b8154815290600101906020018083116115fd57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116116405750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f9095015480831615159185019190915291909104161515910152828461170a81615b36565b95508151811061171c5761171c615acf565b60200260200101819052505b8061173281615b36565b9150506110d7565b50611dd6565b6003856040516117509190615b51565b90815260200160405180910390205467ffffffffffffffff81111561177757611777615242565b6040519080825280602002602001820160405280156117b057816020015b61179d614dd1565b8152602001906001900390816117955790505b50905060005b600154811015611dd457856040516020016117d19190615b51565b60405160208183030381529060405280519060200120600182815481106117fa576117fa615acf565b906000526020600020906010020160080160405160200161181b9190615b6d565b604051602081830303815290604052805190602001201415611dc2576001818154811061184a5761184a615acf565b9060005260206000209060100201604051806101c00160405290816000820154815260200160018201805461187e90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa90615ae5565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b5050505050815260200160028201805461191090615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461193c90615ae5565b80156119895780601f1061195e57610100808354040283529160200191611989565b820191906000526020600020905b81548152906001019060200180831161196c57829003601f168201915b505050505081526020016003820180546119a290615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546119ce90615ae5565b8015611a1b5780601f106119f057610100808354040283529160200191611a1b565b820191906000526020600020905b8154815290600101906020018083116119fe57829003601f168201915b5050505050815260200160048201604051806040016040529081600082018054611a4490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7090615ae5565b8015611abd5780601f10611a9257610100808354040283529160200191611abd565b820191906000526020600020905b815481529060010190602001808311611aa057829003601f168201915b505050505081526020016001820154815250508152602001600682018054611ae490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1090615ae5565b8015611b5d5780601f10611b3257610100808354040283529160200191611b5d565b820191906000526020600020905b815481529060010190602001808311611b4057829003601f168201915b5050509183525050600782015460209091019060ff166004811115611b8457611b84615003565b6004811115611b9557611b95615003565b8152602001600882018054611ba990615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd590615ae5565b8015611c225780601f10611bf757610100808354040283529160200191611c22565b820191906000526020600020905b815481529060010190602001808311611c0557829003601f168201915b50505050508152602001600982018054611c3b90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6790615ae5565b8015611cb45780601f10611c8957610100808354040283529160200191611cb4565b820191906000526020600020905b815481529060010190602001808311611c9757829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b815481526020019060010190808311611cda5750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f90950154808316151591850191909152919091041615159101528284611da481615b36565b955081518110611db657611db6615acf565b60200260200101819052505b80611dcc81615b36565b9150506117b6565b505b9150505b92915050565b60606000600883604051611df49190615b51565b90815260200160405180910390205467ffffffffffffffff811115611e1b57611e1b615242565b604051908082528060200260200182016040528015611e5457816020015b611e41614dd1565b815260200190600190039081611e395790505b5090506000805b60015481101561247c5784604051602001611e769190615b51565b6040516020818303038152906040528051906020012060018281548110611e9f57611e9f615acf565b9060005260206000209060100201600401600001604051602001611ec39190615b6d565b60405160208183030381529060405280519060200120141561246a5760018181548110611ef257611ef2615acf565b9060005260206000209060100201604051806101c001604052908160008201548152602001600182018054611f2690615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5290615ae5565b8015611f9f5780601f10611f7457610100808354040283529160200191611f9f565b820191906000526020600020905b815481529060010190602001808311611f8257829003601f168201915b50505050508152602001600282018054611fb890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe490615ae5565b80156120315780601f1061200657610100808354040283529160200191612031565b820191906000526020600020905b81548152906001019060200180831161201457829003601f168201915b5050505050815260200160038201805461204a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461207690615ae5565b80156120c35780601f10612098576101008083540402835291602001916120c3565b820191906000526020600020905b8154815290600101906020018083116120a657829003601f168201915b50505050508152602001600482016040518060400160405290816000820180546120ec90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461211890615ae5565b80156121655780601f1061213a57610100808354040283529160200191612165565b820191906000526020600020905b81548152906001019060200180831161214857829003601f168201915b50505050508152602001600182015481525050815260200160068201805461218c90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546121b890615ae5565b80156122055780601f106121da57610100808354040283529160200191612205565b820191906000526020600020905b8154815290600101906020018083116121e857829003601f168201915b5050509183525050600782015460209091019060ff16600481111561222c5761222c615003565b600481111561223d5761223d615003565b815260200160088201805461225190615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461227d90615ae5565b80156122ca5780601f1061229f576101008083540402835291602001916122ca565b820191906000526020600020905b8154815290600101906020018083116122ad57829003601f168201915b505050505081526020016009820180546122e390615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461230f90615ae5565b801561235c5780601f106123315761010080835404028352916020019161235c565b820191906000526020600020905b81548152906001019060200180831161233f57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116123825750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f9095015480831615159185019190915291909104161515910152838361244c81615b36565b94508151811061245e5761245e615acf565b60200260200101819052505b8061247481615b36565b915050611e5b565b50909392505050565b61248d614dd1565b600182815481106124a0576124a0615acf565b9060005260206000209060100201604051806101c0016040529081600082015481526020016001820180546124d490615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461250090615ae5565b801561254d5780601f106125225761010080835404028352916020019161254d565b820191906000526020600020905b81548152906001019060200180831161253057829003601f168201915b5050505050815260200160028201805461256690615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461259290615ae5565b80156125df5780601f106125b4576101008083540402835291602001916125df565b820191906000526020600020905b8154815290600101906020018083116125c257829003601f168201915b505050505081526020016003820180546125f890615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461262490615ae5565b80156126715780601f1061264657610100808354040283529160200191612671565b820191906000526020600020905b81548152906001019060200180831161265457829003601f168201915b505050505081526020016004820160405180604001604052908160008201805461269a90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546126c690615ae5565b80156127135780601f106126e857610100808354040283529160200191612713565b820191906000526020600020905b8154815290600101906020018083116126f657829003601f168201915b50505050508152602001600182015481525050815260200160068201805461273a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461276690615ae5565b80156127b35780601f10612788576101008083540402835291602001916127b3565b820191906000526020600020905b81548152906001019060200180831161279657829003601f168201915b5050509183525050600782015460209091019060ff1660048111156127da576127da615003565b60048111156127eb576127eb615003565b81526020016008820180546127ff90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461282b90615ae5565b80156128785780601f1061284d57610100808354040283529160200191612878565b820191906000526020600020905b81548152906001019060200180831161285b57829003601f168201915b5050505050815260200160098201805461289190615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546128bd90615ae5565b801561290a5780601f106128df5761010080835404028352916020019161290a565b820191906000526020600020905b8154815290600101906020018083116128ed57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116129305750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f909501548083161515918501919091529190910416151591015292915050565b60606000606083156130da57600685604051612a119190615b51565b90815260200160405180910390205467ffffffffffffffff811115612a3857612a38615242565b604051908082528060200260200182016040528015612a7157816020015b612a5e614dd1565b815260200190600190039081612a565790505b50905060005b60015481101561173a576001808281548110612a9557612a95615acf565b600091825260209091206007601090920201015460ff166004811115612abd57612abd615003565b148015612b38575085604051602001612ad69190615b51565b6040516020818303038152906040528051906020012060018281548110612aff57612aff615acf565b9060005260206000209060100201600901604051602001612b209190615b6d565b60405160208183030381529060405280519060200120145b156130c85760018181548110612b5057612b50615acf565b9060005260206000209060100201604051806101c001604052908160008201548152602001600182018054612b8490615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb090615ae5565b8015612bfd5780601f10612bd257610100808354040283529160200191612bfd565b820191906000526020600020905b815481529060010190602001808311612be057829003601f168201915b50505050508152602001600282018054612c1690615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612c4290615ae5565b8015612c8f5780601f10612c6457610100808354040283529160200191612c8f565b820191906000526020600020905b815481529060010190602001808311612c7257829003601f168201915b50505050508152602001600382018054612ca890615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd490615ae5565b8015612d215780601f10612cf657610100808354040283529160200191612d21565b820191906000526020600020905b815481529060010190602001808311612d0457829003601f168201915b5050505050815260200160048201604051806040016040529081600082018054612d4a90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612d7690615ae5565b8015612dc35780601f10612d9857610100808354040283529160200191612dc3565b820191906000526020600020905b815481529060010190602001808311612da657829003601f168201915b505050505081526020016001820154815250508152602001600682018054612dea90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612e1690615ae5565b8015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b5050509183525050600782015460209091019060ff166004811115612e8a57612e8a615003565b6004811115612e9b57612e9b615003565b8152602001600882018054612eaf90615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612edb90615ae5565b8015612f285780601f10612efd57610100808354040283529160200191612f28565b820191906000526020600020905b815481529060010190602001808311612f0b57829003601f168201915b50505050508152602001600982018054612f4190615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054612f6d90615ae5565b8015612fba5780601f10612f8f57610100808354040283529160200191612fba565b820191906000526020600020905b815481529060010190602001808311612f9d57829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b815481526020019060010190808311612fe05750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f909501548083161515918501919091529190910416151591015282846130aa81615b36565b9550815181106130bc576130bc615acf565b60200260200101819052505b806130d281615b36565b915050612a77565b6005856040516130ea9190615b51565b90815260200160405180910390205467ffffffffffffffff81111561311157613111615242565b60405190808252806020026020018201604052801561314a57816020015b613137614dd1565b81526020019060019003908161312f5790505b50905060005b600154811015611dd4578560405160200161316b9190615b51565b604051602081830303815290604052805190602001206001828154811061319457613194615acf565b90600052602060002090601002016009016040516020016131b59190615b6d565b60405160208183030381529060405280519060200120141561375c57600181815481106131e4576131e4615acf565b9060005260206000209060100201604051806101c00160405290816000820154815260200160018201805461321890615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461324490615ae5565b80156132915780601f1061326657610100808354040283529160200191613291565b820191906000526020600020905b81548152906001019060200180831161327457829003601f168201915b505050505081526020016002820180546132aa90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546132d690615ae5565b80156133235780601f106132f857610100808354040283529160200191613323565b820191906000526020600020905b81548152906001019060200180831161330657829003601f168201915b5050505050815260200160038201805461333c90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461336890615ae5565b80156133b55780601f1061338a576101008083540402835291602001916133b5565b820191906000526020600020905b81548152906001019060200180831161339857829003601f168201915b50505050508152602001600482016040518060400160405290816000820180546133de90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461340a90615ae5565b80156134575780601f1061342c57610100808354040283529160200191613457565b820191906000526020600020905b81548152906001019060200180831161343a57829003601f168201915b50505050508152602001600182015481525050815260200160068201805461347e90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546134aa90615ae5565b80156134f75780601f106134cc576101008083540402835291602001916134f7565b820191906000526020600020905b8154815290600101906020018083116134da57829003601f168201915b5050509183525050600782015460209091019060ff16600481111561351e5761351e615003565b600481111561352f5761352f615003565b815260200160088201805461354390615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461356f90615ae5565b80156135bc5780601f10613591576101008083540402835291602001916135bc565b820191906000526020600020905b81548152906001019060200180831161359f57829003601f168201915b505050505081526020016009820180546135d590615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461360190615ae5565b801561364e5780601f106136235761010080835404028352916020019161364e565b820191906000526020600020905b81548152906001019060200180831161363157829003601f168201915b505050918352505060408051606081019182905260209092019190600a84019060039082845b8154815260200190600101908083116136745750505091835250506040805160608082018352600d85015460ff80821615158452610100808304821615156020868101919091526201000093849004831615158688015280880195909552855160808082018852600e8a015480851615158352838104851615159783019790975293860483161515818801526301000000909504821615158585015294860193909352600f9095015480831615159185019190915291909104161515910152828461373e81615b36565b95508151811061375057613750615acf565b60200260200101819052505b8061376681615b36565b915050613150565b60005460405163179dea8360e31b8152600481018390526060916001600160a01b03169063bcef54189060240160006040518083038186803b1580156137b357600080fd5b505afa1580156137c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dda9190810190615bdf565b426001828154811061380357613803615acf565b9060005260206000209060100201600a0160026003811061382657613826615acf565b015411613a4d57600180828154811061384157613841615acf565b600091825260209091206007601090920201015460ff16600481111561386957613869615003565b1415613984576002805490600061387f83615ccc565b919050555060046001828154811061389957613899615acf565b90600052602060002090601002016008016040516138b79190615b6d565b90815260405190819003602001902080549060006138d483615ccc565b91905055506006600182815481106138ee576138ee615acf565b906000526020600020906010020160090160405161390c9190615b6d565b908152604051908190036020019020805490600061392983615ccc565b919050555060076001828154811061394357613943615acf565b90600052602060002090601002016002016040516139619190615b6d565b908152604051908190036020019020805490600061397e83615ccc565b91905055505b60046001828154811061399957613999615acf565b60009182526020909120600760109092020101805460ff191660018360048111156139c6576139c6615003565b02179055507f8fdec0edc19a1eb9147642be05b326b7f5d42bf96f5ba734530bfca33bc8d7e9600182815481106139ff576139ff615acf565b906000526020600020906010020160080160018381548110613a2357613a23615acf565b906000526020600020906010020160090183604051613a4493929190615d5a565b60405180910390a15b50565b600060018c81548110613a6557613a65615acf565b9060005260206000209060100201905086604051602001613a869190615b51565b6040516020818303038152906040528051906020012060018d81548110613aaf57613aaf615acf565b9060005260206000209060100201600801604051602001613ad09190615b6d565b6040516020818303038152906040528051906020012014613b425760405162461bcd60e51b815260206004820152602160248201527f4e6f74207468652070726f7669646572206f66207468652061677265656d656e6044820152601d60fa1b60648201526084015b60405180910390fd5b6001600782015460ff166004811115613b5d57613b5d615003565b1415613ec6578751613b7890600683019060208b0190614e9a565b5084600081518110613b8c57613b8c615acf565b602002602001015181600a01600160038110613baa57613baa615acf565b0155600a81016000015485600081518110613bc757613bc7615acf565b60200260200101511015613c2d5760405162461bcd60e51b815260206004820152602760248201527f53746172742064617465206d757374206265206166746572206372656174696f60448201526637103230ba329760c91b6064820152608401613b39565b84600081518110613c4057613c40615acf565b602002602001015185600181518110613c5b57613c5b615acf565b602002602001015111613cbb5760405162461bcd60e51b815260206004820152602260248201527f456e642064617465206d75737420626520616674657220737461727420646174604482015261329760f11b6064820152608401613b39565b84600181518110613cce57613cce615acf565b602002602001015181600a01600260038110613cec57613cec615acf565b01558351600d820180546020808801516040808a015161ffff1994851696151561ff00199081169790971761010093151584021762ff00001916620100009115158202179095558851600e88018054948b0151928b015160608c015195909616911515909716179015159091021763ffff0000191691151590920263ff000000191617630100000091151591909102179055600f8101805460ff1990811684151517909155600782018054600292166001830217905550600060018d81548110613db857613db8615acf565b600091825260208220600f6010909202010180549215156101000261ff0019909316929092179091556002805491613def83615ccc565b9190505550600487604051613e049190615b51565b9081526040519081900360200190208054906000613e2183615ccc565b9190505550600686604051613e369190615b51565b9081526040519081900360200190208054906000613e5383615ccc565b919050555060078a604051613e689190615b51565b9081526040519081900360200190208054906000613e8583615ccc565b91905055507fe45a4efc7be91ee38226641b8dfb0a53e062696831d4052b7b79903b7d39301187878e604051613ebd93929190615d90565b60405180910390a15b505050505050505050505050565b80604051602001613ee59190615b51565b6040516020818303038152906040528051906020012060018381548110613f0e57613f0e615acf565b9060005260206000209060100201600901604051602001613f2f9190615b6d565b6040516020818303038152906040528051906020012014613f925760405162461bcd60e51b815260206004820152601e60248201527f4e6f742074686520636f6e73756d6572206f662061677265656d656e742e00006044820152606401613b39565b6001808381548110613fa657613fa6615acf565b9060005260206000209060100201600f0160016101000a81548160ff0219169083151502179055504260018381548110613fe257613fe2615acf565b9060005260206000209060100201600a0160026003811061400557614005615acf565b0154106141a257600180838154811061402057614020615acf565b60009182526020909120600760109092020101805460ff1916600183600481111561404d5761404d615003565b02179055506002805490600061406283615b36565b919050555060046001838154811061407c5761407c615acf565b906000526020600020906010020160080160405161409a9190615b6d565b90815260405190819003602001902080549060006140b783615b36565b91905055506006816040516140cc9190615b51565b90815260405190819003602001902080549060006140e983615b36565b919050555060076001838154811061410357614103615acf565b90600052602060002090601002016002016040516141219190615b6d565b908152604051908190036020019020805490600061413e83615b36565b91905055507faf3cbb721f27933bb22b42ea3324fba0c7cf12a6fc685cbf705ba7674aaad1b26001838154811061417757614177615acf565b9060005260206000209060100201600801828460405161419993929190615db5565b60405180910390a15b5050565b6141ae614dd1565b60208181018d9052604082018c9052606082018b90528951608083018051919091528a82015190519091015260a0810188905260e081018790526101008101869052600060c08201819052855186919061420a5761420a615acf565b602002602001015181610120015160006003811061422a5761422a615acf565b602002015284518590600190811061424457614244615acf565b602002602001015181610120015160016003811061426457614264615acf565b60200201526101208101515185518690600190811061428557614285615acf565b602002602001015110156142eb5760405162461bcd60e51b815260206004820152602760248201527f53746172742064617465206d757374206265206166746572206372656174696f60448201526637103230ba329760c91b6064820152608401613b39565b846001815181106142fe576142fe615acf565b60200260200101518560028151811061431957614319615acf565b6020026020010151116143795760405162461bcd60e51b815260206004820152602260248201527f456e642064617465206d75737420626520616674657220737461727420646174604482015261329760f11b6064820152608401613b39565b8460028151811061438c5761438c615acf565b60200260200101518161012001516002600381106143ac576143ac615acf565b6020908102919091019190915284516101408301805191151590915285820151815190151590830152604080870151915191151591810191909152845161016084018051911515909152858301518151901515908401528582015181519015159201919091526060808601519151911515910152821515610180830152600180548084528082018255600091909152825160109091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101918255838301518051859461449e937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf701920190614e9a565b50604082015180516144ba916002840191602090910190614e9a565b50606082015180516144d6916003840191602090910190614e9a565b5060808201518051805160048401916144f491839160200190614e9a565b5060209182015160019091015560a083015180516145189260068501920190614e9a565b5060c082015160078201805460ff1916600183600481111561453c5761453c615003565b021790555060e0820151805161455c916008840191602090910190614e9a565b506101008201518051614579916009840191602090910190614e9a565b5061012082015161459090600a8301906003614f1e565b506101408201518051600d8301805460208085015160409586015161ffff1993841695151561ff00199081169690961761010092151583021762ff00001916620100009115158202179094556101608801518051600e8901805494830151838a015160609094015195871692151589169290921791151584029190911763ffff0000191691151590950263ff00000019161763010000009215159290920291909117909255610180860151600f90950180546101a090970151969091169415159092169390931793151590920292909217905551600390614672908990615b51565b908152604051908190036020019020805490600061468f83615b36565b91905055506005866040516146a49190615b51565b90815260405190819003602001902080549060006146c183615b36565b909155505088516040516008916146d791615b51565b90815260405190819003602001902080549060006146f483615b36565b9091555050600180547f6435418332f1be3deea10416eedb87e64daa2a2b4a284b051f39244cc3a0dfa6918991899161472c91615dc8565b604051613ebd93929190615d90565b6001818154811061474b57600080fd5b6000918252602090912060109091020180546001820180549193509061477090615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461479c90615ae5565b80156147e95780601f106147be576101008083540402835291602001916147e9565b820191906000526020600020905b8154815290600101906020018083116147cc57829003601f168201915b5050505050908060020180546147fe90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461482a90615ae5565b80156148775780601f1061484c57610100808354040283529160200191614877565b820191906000526020600020905b81548152906001019060200180831161485a57829003601f168201915b50505050509080600301805461488c90615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546148b890615ae5565b80156149055780601f106148da57610100808354040283529160200191614905565b820191906000526020600020905b8154815290600101906020018083116148e857829003601f168201915b5050505050908060040160405180604001604052908160008201805461492a90615ae5565b80601f016020809104026020016040519081016040528092919081815260200182805461495690615ae5565b80156149a35780601f10614978576101008083540402835291602001916149a3565b820191906000526020600020905b81548152906001019060200180831161498657829003601f168201915b50505050508152602001600182015481525050908060060180546149c690615ae5565b80601f01602080910402602001604051908101604052809291908181526020018280546149f290615ae5565b8015614a3f5780601f10614a1457610100808354040283529160200191614a3f565b820191906000526020600020905b815481529060010190602001808311614a2257829003601f168201915b5050506007840154600885018054949560ff909216949193509150614a6390615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054614a8f90615ae5565b8015614adc5780601f10614ab157610100808354040283529160200191614adc565b820191906000526020600020905b815481529060010190602001808311614abf57829003601f168201915b505050505090806009018054614af190615ae5565b80601f0160208091040260200160405190810160405280929190818152602001828054614b1d90615ae5565b8015614b6a5780601f10614b3f57610100808354040283529160200191614b6a565b820191906000526020600020905b815481529060010190602001808311614b4d57829003601f168201915b50506040805160608082018352600d88015460ff8082161515845261010080830482161515602080870191909152620100009384900483161515868801528651608081018852600e8d0154808516151582528381048516151592820192909252938104831615159684019690965263010000009095048116151592820192909252600f909801549697919691955081811694509190041690508d565b600054604051630222803b60e61b81526001600160a01b03909116906388a00ec090614c44908b908b908b908b908b908b908b908b90600401615ddf565b600060405180830381600087803b158015614c5e57600080fd5b505af1158015614c72573d6000803e3d6000fd5b50506000805460405163179dea8360e31b8152600481018d90529193506001600160a01b0316915063bcef54189060240160006040518083038186803b158015614cbb57600080fd5b505afa158015614ccf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614cf79190810190615bdf565b511115614d4657600360018981548110614d1357614d13615acf565b60009182526020909120600760109092020101805460ff19166001836004811115614d4057614d40615003565b02179055505b7fac46f93b782753aa8893b24ed8cc9e12cdf5a8f392d332bb85a012b8aab4eab760018981548110614d7a57614d7a615acf565b906000526020600020906010020160080160018a81548110614d9e57614d9e615acf565b90600052602060002090601002016009018a604051614dbf93929190615d5a565b60405180910390a15050505050505050565b604051806101c0016040528060008152602001606081526020016060815260200160608152602001614e16604051806040016040528060608152602001600081525090565b815260606020820152604001600081526020016060815260200160608152602001614e3f614f4b565b8152604080516060810182526000808252602082810182905292820152910190815260408051608081018252600080825260208281018290529282018190526060820152910190815260006020820181905260409091015290565b828054614ea690615ae5565b90600052602060002090601f016020900481019282614ec85760008555614f0e565b82601f10614ee157805160ff1916838001178555614f0e565b82800160010185558215614f0e579182015b82811115614f0e578251825591602001919060010190614ef3565b50614f1a929150614f69565b5090565b8260038101928215614f0e5791602002820182811115614f0e578251825591602001919060010190614ef3565b60405180606001604052806003906020820280368337509192915050565b5b80821115614f1a5760008155600101614f6a565b60005b83811015614f99578181015183820152602001614f81565b83811115614fa8576000848401525b50505050565b60008151808452614fc6816020860160208601614f7e565b601f01601f19169290920160200192915050565b6000815160408452614fef6040850182614fae565b602093840151949093019390935250919050565b634e487b7160e01b600052602160045260246000fd5b6005811061503757634e487b7160e01b600052602160045260246000fd5b9052565b8060005b6003811015614fa857815184526020938401939091019060010161503f565b60006102a082518452602083015181602086015261507e82860182614fae565b915050604083015184820360408601526150988282614fae565b915050606083015184820360608601526150b28282614fae565b915050608083015184820360808601526150cc8282614fda565b91505060a083015184820360a08601526150e68282614fae565b91505060c08301516150fb60c0860182615019565b5060e083015184820360e08601526151138282614fae565b915050610100808401518583038287015261512e8382614fae565b92505050610120808401516151458287018261503b565b5050610140830151610180615176818701838051151582526020808201511515908301526040908101511515910152565b610160850151805115156101e088015260208101511515610200880152604081015115156102208801526060015115156102408701528401511515610260860152506101a090920151151561028090930192909252919050565b600082825180855260208086019550808260051b84010181860160005b8481101561521b57601f1986840301895261520983835161505e565b988401989250908301906001016151ed565b5090979650505050505050565b60208152600061523b60208301846151d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561528157615281615242565b604052919050565b600067ffffffffffffffff8211156152a3576152a3615242565b50601f01601f191660200190565b600082601f8301126152c257600080fd5b81356152d56152d082615289565b615258565b8181528460208386010111156152ea57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561531957600080fd5b813567ffffffffffffffff81111561533057600080fd5b61533c848285016152b1565b949350505050565b60408152600061535760408301856151d0565b90508260208301529392505050565b60006020828403121561537857600080fd5b5035919050565b60208101611dda8284615019565b8035801515811461539d57600080fd5b919050565b600080604083850312156153b557600080fd5b823567ffffffffffffffff8111156153cc57600080fd5b6153d8858286016152b1565b9250506153e76020840161538d565b90509250929050565b60208152600061523b602083018461505e565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561545857603f19888603018452615446858351614fae565b9450928501929085019060010161542a565b5092979650505050505050565b600067ffffffffffffffff82111561547f5761547f615242565b5060051b60200190565b600082601f83011261549a57600080fd5b813560206154aa6152d083615465565b82815260059290921b840181019181810190868411156154c957600080fd5b8286015b848110156154e457803583529183019183016154cd565b509695505050505050565b60006060828403121561550157600080fd5b6040516060810181811067ffffffffffffffff8211171561552457615524615242565b6040529050806155338361538d565b81526155416020840161538d565b60208201526155526040840161538d565b60408201525092915050565b60006080828403121561557057600080fd5b6040516080810181811067ffffffffffffffff8211171561559357615593615242565b6040529050806155a28361538d565b81526155b06020840161538d565b60208201526155c16040840161538d565b60408201526155d26060840161538d565b60608201525092915050565b60008060008060008060008060008060006102008c8e03121561560057600080fd5b8b359a5067ffffffffffffffff8060208e0135111561561e57600080fd5b61562e8e60208f01358f016152b1565b9a508060408e0135111561564157600080fd5b6156518e60408f01358f016152b1565b99508060608e0135111561566457600080fd5b6156748e60608f01358f016152b1565b98508060808e0135111561568757600080fd5b6156978e60808f01358f016152b1565b97508060a08e013511156156aa57600080fd5b6156ba8e60a08f01358f016152b1565b96508060c08e013511156156cd57600080fd5b6156dd8e60c08f01358f016152b1565b95508060e08e013511156156f057600080fd5b506157018d60e08e01358e01615489565b93506157118d6101008e016154ef565b92506157218d6101608e0161555e565b91506157306101e08d0161538d565b90509295989b509295989b9093969950565b6000806040838503121561575557600080fd5b82359150602083013567ffffffffffffffff81111561577357600080fd5b61577f858286016152b1565b9150509250929050565b60006040828403121561579b57600080fd5b6040516040810167ffffffffffffffff82821081831117156157bf576157bf615242565b8160405282935084359150808211156157d757600080fd5b506157e4858286016152b1565b825250602083013560208201525092915050565b60008060008060008060008060008060006102008c8e03121561581a57600080fd5b67ffffffffffffffff808d35111561583157600080fd5b61583e8e8e358f016152b1565b9b508060208e0135111561585157600080fd5b6158618e60208f01358f016152b1565b9a508060408e0135111561587457600080fd5b6158848e60408f01358f016152b1565b99508060608e0135111561589757600080fd5b6156748e60608f01358f01615789565b8d8152610240602082015260006158c261024083018f614fae565b82810360408401526158d4818f614fae565b905082810360608401526158e8818e614fae565b905082810360808401526158fc818d614fda565b905082810360a0840152615910818c614fae565b905061591f60c084018b615019565b82810360e0840152615931818a614fae565b90508281036101008401526159468189614fae565b87511515610120850152602088015115156101408501526040880151151561016085015291506159739050565b84511515610180830152602085015115156101a0830152604085015115156101c083015260609094015115156101e08201529115156102008301521515610220909101529a9950505050505050505050565b600080600080600080600080610100898b0312156159e257600080fd5b88359750602089013567ffffffffffffffff80821115615a0157600080fd5b615a0d8c838d016152b1565b985060408b0135915080821115615a2357600080fd5b615a2f8c838d016152b1565b975060608b0135915080821115615a4557600080fd5b615a518c838d016152b1565b965060808b0135915080821115615a6757600080fd5b615a738c838d016152b1565b955060a08b0135945060c08b0135915080821115615a9057600080fd5b615a9c8c838d016152b1565b935060e08b0135915080821115615ab257600080fd5b50615abf8b828c016152b1565b9150509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680615af957607f821691505b60208210811415615b1a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415615b4a57615b4a615b20565b5060010190565b60008251615b63818460208701614f7e565b9190910192915050565b6000808354615b7b81615ae5565b60018281168015615b935760018114615ba457615bd3565b60ff19841687528287019450615bd3565b8760005260208060002060005b85811015615bca5781548a820152908401908201615bb1565b50505082870194505b50929695505050505050565b60006020808385031215615bf257600080fd5b825167ffffffffffffffff80821115615c0a57600080fd5b818501915085601f830112615c1e57600080fd5b8151615c2c6152d082615465565b81815260059190911b83018401908481019088831115615c4b57600080fd5b8585015b83811015615cbf57805185811115615c675760008081fd5b8601603f81018b13615c795760008081fd5b878101516040615c8b6152d083615289565b8281528d82848601011115615ca05760008081fd5b615caf838c8301848701614f7e565b8652505050918601918601615c4f565b5098975050505050505050565b600081615cdb57615cdb615b20565b506000190190565b60008154615cf081615ae5565b808552602060018381168015615d0d5760018114615d2157615d4f565b60ff19851688840152604088019550615d4f565b866000528260002060005b85811015615d475781548a8201860152908301908401615d2c565b890184019650505b505050505092915050565b606081526000615d6d6060830186615ce3565b8281036020840152615d7f8186615ce3565b915050826040830152949350505050565b606081526000615da36060830186614fae565b8281036020840152615d7f8186614fae565b606081526000615da36060830186615ce3565b600082821015615dda57615dda615b20565b500390565b60006101008a8352806020840152615df98184018b614fae565b90508281036040840152615e0d818a614fae565b90508281036060840152615e218189614fae565b90508281036080840152615e358188614fae565b90508560a084015282810360c0840152615e4f8186614fae565b905082810360e0840152615e638185614fae565b9b9a505050505050505050505056fea26469706673582212208678f0a46c965017a0c6bb8ddebb5a34aae707eaeb85b2c3fad68490da28ca7e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "agreementViolation",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AgreementViolation)1681"
      },
      {
        "astId": 76,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "agreements",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Agreement)51_storage)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "activeAgreementCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 82,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "providerCount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 86,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "providerActiveCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 90,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "consumerCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 94,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "consumerActiveCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 98,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "consumerPublicKeyCount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 102,
        "contract": "contracts/Agreement.sol:DataSharingAgreement",
        "label": "dataOfferingCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_array(t_struct(Agreement)51_storage)dyn_storage": {
        "base": "t_struct(Agreement)51_storage",
        "encoding": "dynamic_array",
        "label": "struct DataSharingAgreement.Agreement[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AgreementViolation)1681": {
        "encoding": "inplace",
        "label": "contract AgreementViolation",
        "numberOfBytes": "20"
      },
      "t_enum(State)16": {
        "encoding": "inplace",
        "label": "enum DataSharingAgreement.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)51_storage": {
        "encoding": "inplace",
        "label": "struct DataSharingAgreement.Agreement",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "agreementId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "providerPublicKey",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 22,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "consumerPublicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 24,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "dataExchangeAgreementHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 27,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "dataOffering",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(DataOffering)56_storage"
          },
          {
            "astId": 29,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "purpose",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 32,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(State)16"
          },
          {
            "astId": 34,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "providerId",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 36,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "consumerId",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "agreementDates",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "intendedUse",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(IntendedUse)63_storage"
          },
          {
            "astId": 46,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "licenseGrant",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(LicenseGrant)72_storage"
          },
          {
            "astId": 48,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "dataStream",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 50,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "signed",
            "offset": 1,
            "slot": "15",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(DataOffering)56_storage": {
        "encoding": "inplace",
        "label": "struct DataSharingAgreement.DataOffering",
        "members": [
          {
            "astId": 53,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "dataOfferingId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 55,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "dataOfferingVersion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(IntendedUse)63_storage": {
        "encoding": "inplace",
        "label": "struct DataSharingAgreement.IntendedUse",
        "members": [
          {
            "astId": 58,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "processData",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 60,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "shareDataWithThirdParty",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 62,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "editData",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LicenseGrant)72_storage": {
        "encoding": "inplace",
        "label": "struct DataSharingAgreement.LicenseGrant",
        "members": [
          {
            "astId": 65,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "copyData",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 67,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "transferable",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 69,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "exclusiveness",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 71,
            "contract": "contracts/Agreement.sol:DataSharingAgreement",
            "label": "revocable",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}